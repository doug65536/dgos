## Process this file with automake to produce Makefile.in

#SUFFIXES: .y
#
#%.c %.h %.out: %.y
#	lemon $<
#

export ARCH

$(info ARCH is $(ARCH))

if dual_arch
$(info Dual architecture target supports 32 bit and 64 bit processes)
else
$(info Single architecture target supports 64 bit processes only)
endif

noinst_PROGRAMS =

DUMPDIR = dump

STARTUP_FILE_NAMES = crt0 crti crtn crt0pc80 crt0pc64 crt0pc32
STDLIB_FILE_NAMES = c g m stdc++
USRLIB_FILE_NAMES =  png z

if dual_arch
STARTUP_FILE_NAMES_32 = $(patsubst %,%32,$(STARTUP_FILE_NAMES))
STDLIB_FILE_NAMES_32 = $(patsubst %,%32,$(STDLIB_FILE_NAMES))
USRLIB_FILE_NAMES_32 = $(patsubst %,%32,$(USRLIB_FILE_NAMES))
else
STARTUP_FILE_NAMES_32 =
STDLIB_FILE_NAMES_32 =
USRLIB_FILE_NAMES_32 =
endif

STARTUP_FILES_INSTALLED = \
	$(patsubst %,sysroot/lib/%.o,\
	$(STARTUP_FILE_NAMES))

STDLIB_STATIC_FILES_INSTALLED = \
	$(patsubst %,sysroot/lib/lib%.a,\
	$(STDLIB_FILE_NAMES))

USRLIB_STATIC_FILES_INSTALLED = \
	$(patsubst %,sysroot/lib/lib%.a,\
		$(USRLIB_FILE_NAMES))

STARTUP_FILES_INSTALLED_32 =
STDLIB_STATIC_FILES_INSTALLED_32 =
USRLIB_STATIC_FILES_INSTALLED_32 =
if dual_arch
	STARTUP_FILES_INSTALLED_32 = \
		$(patsubst %32,sysroot/lib32/%.o,\
		$(STARTUP_FILE_NAMES_32))
	STDLIB_STATIC_FILES_INSTALLED_32 = \
		$(patsubst %32,sysroot/lib32/lib%.a,\
		$(STDLIB_FILE_NAMES_32))
	USRLIB_STATIC_FILES_INSTALLED_32 = \
		$(patsubst %32,sysroot/lib32/lib%.a,\
		$(USRLIB_FILE_NAMES_32))
endif

if userspace_so
	STDLIB_SHARED_FILES_INSTALLED = \
		$(patsubst %,sysroot/lib/lib%.so,\
		$(STDLIB_FILE_NAMES))

	STDLIB_SHARED_FILES_INSTALLED_32 =
	if dual_arch
		STDLIB_SHARED_FILES_INSTALLED_32 = \
			$(patsubst %32,sysroot/lib32/lib%.so,\
			$(STDLIB_FILE_NAMES_32))
	endif
endif

ALL_STDLIB_INSTALLED = \
	$(STARTUP_FILES_INSTALLED) \
	$(STARTUP_FILES_INSTALLED_32) \
	$(STDLIB_STATIC_FILES_INSTALLED) \
	$(STDLIB_STATIC_FILES_INSTALLED_32) \
	$(USRLIB_STATIC_FILES_INSTALLED) \
	$(USRLIB_STATIC_FILES_INSTALLED_32)

ALL_USRLIB_INSTALLED = \
	$(USRLIB_STATIC_FILES_INSTALLED) \
	$(USRLIB_STATIC_FILES_INSTALLED_32)

BUILT_SOURCES = $(generated_headers)


#	$(ALL_STDLIB_INSTALLED)
#	$(ALL_USRLIB_INSTALLED)

BOOTLOADER_COMMON_FLAGS = \
	-D__DGOS__

LIB_SO_FLAGS = -fPIC -shared -nostdlib -Wl,-shared

#sysroot/lib/libc.so \
#sysroot/lib/libg.so \
#sysroot/lib/libm.so \
#sysroot/lib/libstdc++.so

#LINKER_DEBUG = -Wl,--orphan-handling,warn
LINKER_DEBUG =

STARTUPFILES =

noinst_LIBRARIES =
bin_PROGRAMS =
#bootefi-i386

generate_symbols_list =
generate_kallsym_list =

# efi
#-mcmodel=large 


# Workaround ld bugs that screw up position independent instruction relax
# Avoid PIC and use large model
BOOTLOADER_EFI_FLAGS = \
	-D__efi \
	-fshort-wchar -mcld \
	-I$(top_srcdir)/boot \
	-I$(top_srcdir)/boot/include \
	-I$(top_srcdir)/user/libutf \
	-Wl,--no-dynamic-linker \
	-fno-pic -fno-pie -fno-PIC -fno-PIE \
	-nostdlib \
	$(INVISIBILITY_FLAGS) \
	$(COMPILER_FLAGS) \
	$(OPTIMIZE_SPEED_FLAGS) \
	$(NO_FLOAT_FLAGS) \
	$(NO_REDZONE_FLAGS) \
	$(STACK_CHECK_FLAGS) \
	$(NO_STACKPROTECTOR_FLAGS) \
	$(NO_EXCEPTIONS_FLAGS) \
	$(NO_RTTI_FLAGS) \
	$(NO_COMMON_FLAGS) \
	$(FREESTANDING_FLAGS) \
	-D__DGOS_BOOTLOADER__

#$(RETPOLINE_FLAGS)

bin_PROGRAMS += bootefi
generate_symbols_list += bootefi

bootefi_SOURCES = \
	boot/efi/@ARCH@/bootentry_efi.S \
	boot/efi/@ARCH@/cpu64_efi.S \
	boot/efi/@ARCH@/halt_efi.cc \
	boot/efi/@ARCH@/mpentry_efi.S \
	boot/efi/bootefi.cc \
	boot/efi/cpu_efi.cc \
	boot/efi/physmem_efi.cc \
	boot/efi/screen_efi.cc \
	boot/efi/serial_efi.cc \
	boot/efi/malloc_efi.cc \
	boot/efi/diskio_efi.cc \
	boot/efi/tui_efi.cc \
	boot/efi/modelist_efi.cc \
	boot/efi/boottable_efi.cc \
	boot/ctors.cc \
	boot/fs.cc \
	boot/fs/fat32.cc \
	boot/fs/fat32.h \
	boot/fs/iso9660.cc \
	boot/fs/iso9660.h \
	boot/physmap.cc \
	boot/debug.cc \
	boot/serial.cc \
	boot/assert.cc \
	boot/string.cc \
	boot/string_char16.cc \
	boot/screen.cc \
	boot/malloc.cc \
	boot/rand.cc \
	boot/paging.cc \
	boot/elf64.cc \
	boot/progressbar.cc \
	boot/progressbar.h \
	boot/messagebar.cc \
	boot/messagebar.h \
	boot/bootmenu.cc \
	boot/tui.cc \
	boot/include/boottable.h \
	boot/include/boottable_decl.h \
	boot/modelist.cc \
	boot/boottable.cc \
	boot/qemu.h \
	user/libutf/utf.cc

bootefi_CFLAGS = \
	-DFROM_CFLAGS \
	$(BOOTLOADER_COMMON_FLAGS) \
	$(PE64_FLAGS) \
	$(BOOTLOADER_EFI_FLAGS)

bootefi_CXXFLAGS = \
	-DFROM_CXXFLAGS \
	-nostartfiles \
	$(COMPILER_FLAGS) \
	$(BOOTLOADER_COMMON_FLAGS) \
	$(PE64_FLAGS) \
	$(BOOTLOADER_EFI_FLAGS)

bootefi_CCASFLAGS = \
	-DFROM_CCASFLAGS \
	$(BOOTLOADER_COMMON_FLAGS) \
	$(ASM_DEBUG_INFO_FLAGS) \
	$(bootefi_CXXFLAGS) \
	-D__DGOS_BOOTLOADER__

bootefi_LDFLAGS = \
	-DFROM_LDFLAGS \
	$(PE64_FLAGS) \
	$(LIBGCC_PE64) \
	-g \
	-Wl,-T,$(top_srcdir)/boot/efi/bootefi.ld \
	-Wl,-Map,bootefi.map \
	-Wl,--image-base,0x400000 \
	-Wl,--section-alignment,4096 \
	$(NOSTDLIB_FLAGS)

#bootefi_i386_LDFLAGS = \
	-DFROM_LDFLAGS \
	$(PE32_FLAGS) \
	$(LIBGCC_PE32) \
	-g \
	-Wl,-N \
	-Wl,-m,i386pe \
	-Wl,-T,$(top_srcdir)/boot/efi/bootefi.ld \
	-Wl,--subsystem,10 \
	-Wl,-Map,bootefi-i386.map

bootefi_LDADD = \
   $(LIBGCC_PE64)

#bootefi_i386_LDADD = \
   $(LIBGCC_PE32)

EXTRA_bootefi_DEPENDENCIES = \
    $(top_srcdir)/boot/efi/bootefi.ld

#--remove-section=.eh_frame

bootx64.efi: bootefi
	$(OBJCOPY) \
		--strip-debug \
		--remove-section=.debug_info \
		--remove-section=.debug_abbrev \
		--remove-section=.debug_ranges \
		--remove-section=.debug_aranges \
		--remove-section=.debug_line \
		--remove-section=.debug_str \
		--remove-section=.debug_macro \
		--remove-section=.debug_loc \
		--remove-section=.debug_line_str \
		--remove-section=.debug_rnglists \
		$< $@

#bootia32.efi: bootefi-i386
#	$(OBJCOPY) \
#		--remove-section=.eh_frame \
#		--remove-section=.debug_info \
#		--remove-section=.debug_abbrev \
#		--remove-section=.debug_ranges \
#		--remove-section=.debug_aranges \
#		--remove-section=.debug_line \
#		--remove-section=.debug_str \
#		--remove-section=.debug_macro \
#		$< $@

# kernel

KERNEL_EXPLICIT_INSTANTIATIONS = \
	kernel/device/iocp.cc \
	kernel/device/iocp.h \
	kernel/lib/cc/vector.h \
	kernel/lib/cc/vector.cc \
	kernel/lib/cc/cxxstring.h \
	kernel/lib/cc/cxxstring.cc \
	kernel/lib/cc/chrono.h \
	kernel/lib/cc/chrono.cc \
	kernel/lib/cc/numeric.h \
	kernel/lib/cc/numeric.cc \
	kernel/lib/cc/functional.h \
	kernel/lib/cc/functional.cc \
	kernel/lib/cc/initializer_list.h \
	kernel/lib/cc/type_traits.h \
	kernel/lib/cc/type_traits.cc \
	kernel/lib/cc/cxxexception.h \
	kernel/lib/cc/cxxexception.cc \
	kernel/lib/cxxexcept.h \
	kernel/lib/engunit.h \
	kernel/lib/engunit.cc \
	kernel/lib/cxxexcept.cc \
	kernel/lib/mutex.cc \
	kernel/lib/dev_storage.cc \
	kernel/lib/dev_storage.h

#$(KERNEL_EXPLICIT_INSTANTIATIONS)

KERNEL_SOURCES_SHARED = \
	kernel/main.cc \
	kernel/spinlock.h \
	kernel/lib/assert.cc \
	kernel/lib/assert.h \
	kernel/lib/spinlock.cc \
	kernel/lib/atomic.cc \
	kernel/lib/atomic.h \
	kernel/lib/bitop.h \
	kernel/lib/bitsearch.cc \
	kernel/lib/bitsearch.h \
	kernel/lib/bootinfo.cc \
	kernel/lib/bootinfo.h \
	kernel/lib/bsearch.cc \
	kernel/lib/bsearch.h \
	kernel/lib/bswap.cc \
	kernel/lib/bswap.h \
	kernel/lib/pipe.cc \
	kernel/lib/pipe.h \
	kernel/lib/callout.cc \
	kernel/lib/callout.h \
	kernel/lib/radix_tree.h \
	kernel/lib/radix_tree.cc \
	kernel/lib/cc/algorithm.h \
	kernel/lib/cc/algorithm.cc \
	kernel/lib/cc/exception.h \
	kernel/lib/cc/exception.cc \
	kernel/lib/cc/memory.h \
	kernel/lib/cc/memory.cc \
	kernel/lib/cc/utility.h \
	kernel/lib/cc/utility.cc \
	kernel/lib/cc/permute.h \
	kernel/lib/cc/permute.cc \
	kernel/lib/conio.cc \
	kernel/lib/conio.h \
	kernel/lib/debug.cc \
	kernel/lib/debug.h \
	kernel/lib/desc_alloc.cc \
	kernel/lib/desc_alloc.h \
	kernel/lib/dev_eth.cc \
	kernel/lib/dev_eth.h \
	kernel/lib/dev_registration.h \
	kernel/lib/dev_char.cc \
	kernel/lib/dev_char.h \
	kernel/lib/dev_text.cc \
	kernel/lib/dev_text.h \
	kernel/lib/dev_graphics.cc \
	kernel/lib/dev_graphics.h \
	kernel/lib/dirent.h \
	kernel/lib/errno.h \
	kernel/lib/errno.cc \
	kernel/lib/export.h \
	kernel/lib/fileio.cc \
	kernel/lib/fileio.h \
	kernel/lib/framebuffer.cc \
	kernel/lib/framebuffer.h \
	kernel/lib/hash.cc \
	kernel/lib/hash.h \
	kernel/lib/hash_table.cc \
	kernel/lib/hash_table.h \
	kernel/lib/heap.cc \
	kernel/lib/heap.h \
	kernel/lib/intrin_compat.h \
	kernel/lib/irq.cc \
	kernel/lib/irq.h \
	kernel/lib/keyboard.cc \
	kernel/lib/keyboard.h \
	kernel/lib/likely.h \
	kernel/lib/main.h \
	kernel/lib/math.cc \
	kernel/lib/math.h \
	kernel/lib/mm.cc \
	kernel/lib/mm.h \
	kernel/lib/mouse.cc \
	kernel/lib/mouse.h \
	kernel/lib/pool.cc \
	kernel/lib/pool.h \
	kernel/lib/printk.cc \
	kernel/lib/printk.h \
	kernel/lib/priorityqueue.cc \
	kernel/lib/priorityqueue.h \
	kernel/lib/process.cc \
	kernel/lib/process.h \
	kernel/lib/rand.cc \
	kernel/lib/rand.h \
	kernel/lib/rbtree.h \
	kernel/lib/rbtree.cc \
	kernel/lib/basic_set.h \
	kernel/lib/basic_set.cc \
	kernel/lib/refcount.h \
	kernel/lib/refcount.cc \
	kernel/lib/stddef.h \
	kernel/lib/stdlib.cc \
	kernel/lib/stdlib.h \
	kernel/lib/string.cc \
	kernel/lib/string.h \
	kernel/lib/sys/types.h \
	kernel/lib/thread.cc \
	kernel/lib/thread.h \
	kernel/lib/threadsync.cc \
	kernel/lib/threadsync.h \
	kernel/lib/time.cc \
	kernel/lib/time.h \
	kernel/lib/unique_ptr.cc \
	kernel/lib/unique_ptr.h \
	kernel/lib/unistd.h \
	kernel/lib/work_queue.cc \
	kernel/lib/zlib_helper.cc \
	kernel/lib/zlib_helper.h \
	kernel/lib/asan.cc \
	kernel/lib/ubsan.cc \
	kernel/lib/contig_alloc.cc \
	kernel/lib/contig_alloc.h \
	kernel/lib/user_mem.h \
	kernel/lib/uleb.cc \
	kernel/lib/uleb.h \
	kernel/lib/halt.cc \
	kernel/lib/halt.h \
	kernel/fs/devfs.cc \
	kernel/fs/tmpfs.cc \
	kernel/net/arp_frame.cc \
	kernel/net/arp_frame.h \
	kernel/net/arp.h \
	kernel/net/dhcp.cc \
	kernel/net/dhcp.h \
	kernel/net/ethernet.h \
	kernel/net/eth_frame.cc \
	kernel/net/eth_frame.h \
	kernel/net/eth_q.cc \
	kernel/net/eth_q.h \
	kernel/net/icmp.cc \
	kernel/net/icmp_frame.cc \
	kernel/net/icmp_frame.h \
	kernel/net/icmp.h \
	kernel/net/ipv4.cc \
	kernel/net/ipv4_frame.cc \
	kernel/net/ipv4_frame.h \
	kernel/net/ipv4.h \
	kernel/net/ipv4.bits.h \
	kernel/net/tcp.cc \
	kernel/net/tcp_frame.cc \
	kernel/net/tcp_frame.h \
	kernel/net/tcp.h \
	kernel/net/udp.cc \
	kernel/net/udp_frame.cc \
	kernel/net/udp_frame.h \
	kernel/net/udp.h \
	kernel/arch/cpu.h \
	kernel/arch/mmu.h \
	kernel/syscall/syscall_helper.h \
	kernel/syscall/syscall_helper.cc \
	kernel/syscall/sys_fd.cc \
	kernel/syscall/sys_mem.cc \
	kernel/syscall/sys_time.cc \
	kernel/syscall/sys_process.cc \
	kernel/syscall/sys_module.cc \
	kernel/syscall/sys_sys.cc \
	kernel/syscall/sys_render.cc \
	kernel/syscall/sys_framebuffer.cc \
	kernel/syscall/sys_signal.cc \
	kernel/device/acpigas.cc \
	kernel/device/acpigas.h \
	kernel/device/acpihw.cc \
	kernel/device/acpihw.h \
	kernel/device/ata.cc \
	kernel/device/ata.h \
	kernel/device/ata.h \
	kernel/device/e9debug.cc \
	kernel/device/e9debug.h \
	kernel/device/eainstrument.cc \
	kernel/device/eainstrument.h \
	kernel/device/e9debug.h \
	kernel/device/i350/i350.cc \
	kernel/device/keyb8042_layout/keyb8042_layout_us.cc \
	kernel/device/pci.cc \
	kernel/device/pci.h \
	kernel/device/pci.h \
	kernel/device/serial-uart.cc \
	kernel/device/serial-uart.h \
	kernel/device/serial-uart.h \
	kernel/device/usb.h	\
	kernel/device/usb.cc \
	kernel/device/dev_usb_ctl.cc \
	kernel/device/usb_hid/usb_hid.h \
	kernel/device/usb_hid/usb_hid.cc \
	kernel/device/usb_hid/usb_hid_keybd_lookup.h \
	kernel/device/usb_hid/usb_hid_keybd_lookup.cc \
	kernel/device/usb_audio/usb_audio.h \
	kernel/device/usb_audio/usb_audio.cc \
	kernel/device/usb_hub/usb_hub.h \
	kernel/device/usb_hub/usb_hub.cc \
	kernel/device/vga.cc \
	kernel/device/vt100.cc \
	kernel/device/vt100.h \
	kernel/device/vt100_out.cc \
	kernel/device/vt100_out.h \
	kernel/arch/mmu.h \
	user/libutf/utf.cc

BITFIELD_FILES =

BOOT_FILES =

if x86_64
include kernel/arch/x86_64/Make-arch.mk
endif

if aarch64
include kernel/arch/aarch64/Make-arch.mk
endif

KERNEL_INCLUDES_SHARED = \
	-I$(top_srcdir)/boot/include \
	-I$(top_srcdir)/kernel \
	-I$(top_srcdir)/kernel/lib \
	-I$(top_srcdir)/kernel/net \
	-I$(top_srcdir)/kernel/lib/cc \
	-I$(top_srcdir)/kernel/arch \
	-I$(top_srcdir)/kernel/arch/@ARCH@

KERNEL_CXXFLAGS_SHARED = \
	-DFROM_CXXFLAGS \
	-D__DGOS__ \
	-D__DGOS_KERNEL__=0x00000001 \
	-I$(top_srcdir)/user/libutf \
	-fPIE \
	$(FREESTANDING_FLAGS) \
	$(COMPILER_FLAGS) \
	$(OPTIMIZE_SPEED_FLAGS) \
	$(NO_REDZONE_FLAGS) \
	$(NO_STACK_CHECK_FLAGS) \
	$(NO_STACKPROTECTOR_FLAGS) \
	$(NO_RTTI_FLAGS) \
	$(NO_EXCEPTIONS) \
	$(NO_COMMON_FLAGS) \
	$(INVISIBILITY_FLAGS) \
	-export-dynamic \
	$(NO_FLOAT_FLAGS) \
	$(SANITIZE_UNDEFINED_FLAGS) \
	$(WARN_STACK_USAGE_FLAGS)

#-fsanitize-undefined-trap-on-error
#$(NO_EXCEPTIONS_FLAGS)
#$(NO_RTTI_FLAGS)

#$(RETPOLINE_FLAGS)

# Buggy
#$(STACK_CHECK_FLAGS)

KERNEL_CCASFLAGS_SHARED = \
	-DFROM_CCASFLAGS \
	-D__DGOS__ \
	-D__DGOS_KERNEL__ \
	$(ASM_DEBUG_INFO_FLAGS) \
	$(COMPILER_FLAGS)

KERNEL_LDFLAGS_SHARED = \
	-DFROM_LDFLAGS \
	$(ELF64_FLAGS) \
	-Wl,-T,$(top_srcdir)/kernel/arch/$(ARCH)/kernel.ld \
	$(LINKER_DEBUG) \
	-Wl,-g \
	-export-dynamic \
	-Wl,--gc-keep-exported \
	-Wl,-pie \
	-Wl,--whole-archive -Wl,libkei.a -Wl,--no-whole-archive \
	$(NOSTDLIB_FLAGS)

#-Wl,--no-strip-discarded

#-Wl,-m,elf_x86_64
#-Wl,--no-dynamic-linker

#-Wl,-export-dynamic

EXTRA_KERNEL_DEPENDENCIES_SHARED = \
	$(top_srcdir)/kernel/arch/$(ARCH)/kernel.ld \
	libkei.a

KERNEL_LDADD_SHARED = -lgcc

# Separate debug info for kernels

define separate_debug =

dgos-$(1): $(1)
	$$(STRIP) --strip-debug --strip-unneeded -o "$$@" "$$<"

endef

KERNEL_VARIATIONS = generic tracing asan

KERNEL_NAMES = $(patsubst %,kernel-%,$(KERNEL_VARIATIONS))

KERNEL_NAMES_STRIPPED = $(patsubst %,dgos-%,$(KERNEL_NAMES))

$(foreach variation,$(KERNEL_VARIATIONS), \
	$(eval $(call separate_debug,kernel-$(variation))) \
)

# ----------------------------------------------------------------------------
# Explicit instantiations because __attribute__((__visibility__(...))) is broken

noinst_LIBRARIES += libkei.a

libkei_a_SOURCES = \
	$(KERNEL_EXPLICIT_INSTANTIATIONS)

libkei_a_CXXFLAGS = \
	$(KERNEL_CXXFLAGS_SHARED) \
	$(KERNEL_INCLUDES_SHARED) \
	$(VISIBILITY_FLAGS) \
	-DLIBKEI

# ----------------------------------------------------------------------------
# kernel variations

KERNEL_TRACING_FLAGS = \
	$(INSTRUMENT_FUNCTIONS_FLAGS) \
	-Wl,-Map,kernel-tracing.map

KERNEL_ASAN_FLAGS = \
	$(ASAN_FLAGS) \
	-Wl,-Map,kernel-asan.map

KERNEL_GENERIC_FLAGS = \
	-Wl,-Map,kernel-generic.map

bin_PROGRAMS += kernel-generic
generate_symbols_list += kernel-generic
generate_kallsym_list += kernel-generic

kernel_generic_SOURCES = \
	$(KERNEL_SOURCES_SHARED) \
	$(KERNEL_ARCH_SOURCES_SHARED)

kernel_generic_CXXFLAGS = \
	$(KERNEL_CXXFLAGS_SHARED) \
	$(KERNEL_INCLUDES_SHARED) \
	$(KERNEL_GENERIC_FLAGS)

kernel_generic_CCASFLAGS = \
	$(KERNEL_CCASFLAGS_SHARED) \
	$(KERNEL_INCLUDES_SHARED) \
	$(KERNEL_GENERIC_FLAGS)

kernel_generic_LDFLAGS = \
	$(KERNEL_LDFLAGS_SHARED) \
	$(KERNEL_INCLUDES_SHARED) \
	$(KERNEL_GENERIC_FLAGS)

kernel_generic_LDADD = \
	$(KERNEL_LDADD_SHARED)

EXTRA_kernel_generic_DEPENDENCIES = \
	$(EXTRA_KERNEL_DEPENDENCIES_SHARED)

bin_PROGRAMS += kernel-tracing
generate_symbols_list += kernel-tracing
generate_kallsym_list += kernel-tracing

kernel_tracing_SOURCES = \
	$(KERNEL_SOURCES_SHARED) \
	$(KERNEL_ARCH_SOURCES_SHARED)

kernel_tracing_CXXFLAGS = \
	$(KERNEL_CXXFLAGS_SHARED) \
	$(KERNEL_INCLUDES_SHARED) \
	$(KERNEL_TRACING_FLAGS)

kernel_tracing_CFLAGS = \
	$(KERNEL_CXXFLAGS_SHARED) \
	$(KERNEL_INCLUDES_SHARED) \
	$(KERNEL_TRACING_FLAGS)

kernel_tracing_CCASFLAGS = \
	$(KERNEL_CCASFLAGS_SHARED) \
	$(KERNEL_INCLUDES_SHARED) \
	$(KERNEL_TRACING_FLAGS)

kernel_tracing_LDFLAGS = \
	$(KERNEL_LDFLAGS_SHARED) \
	$(KERNEL_INCLUDES_SHARED) \
	$(KERNEL_TRACING_FLAGS)

kernel_tracing_LDADD = $(KERNEL_LDADD_SHARED)

EXTRA_kernel_tracing_DEPENDENCIES = \
	$(EXTRA_KERNEL_DEPENDENCIES_SHARED)

bin_PROGRAMS += kernel-asan
generate_symbols_list += kernel-asan
generate_kallsym_list += kernel-asan

kernel_asan_SOURCES = \
	$(KERNEL_SOURCES_SHARED) \
	$(KERNEL_ARCH_SOURCES_SHARED)

kernel_asan_CXXFLAGS = \
	$(KERNEL_CXXFLAGS_SHARED) \
	$(KERNEL_INCLUDES_SHARED) \
	$(ASAN_FLAGS)

kernel_asan_CFLAGS = \
	$(KERNEL_CXXFLAGS_SHARED) \
	$(KERNEL_INCLUDES_SHARED) \
	$(ASAN_FLAGS)

kernel_asan_CCASFLAGS = \
	$(KERNEL_CCASFLAGS_SHARED) \
	$(KERNEL_INCLUDES_SHARED) \
	$(ASAN_FLAGS)

kernel_asan_LDFLAGS = \
	$(KERNEL_LDFLAGS_SHARED) \
	$(KERNEL_INCLUDES_SHARED) \
	$(ASAN_FLAGS)

kernel_asan_LDADD = $(KERNEL_LDADD_SHARED)

EXTRA_kernel_asan_DEPENDENCIES = \
	$(EXTRA_KERNEL_DEPENDENCIES_SHARED)

# ----------------------------------------------------------------------------
# parse-trace

#WHICH_CXX = $(shell $(WHICH) $(CXX))
#CXX_DIR = $(dir $(WHICH_CXX))
#TOOLCHAIN_DIR = $(abspath $(CXX_DIR)/..)
#
##$(info cxx: $(WHICH_CXX))
##$(info cxx dir: $(CXX_DIR))
##$(info toolchain dir: $(TOOLCHAIN_DIR))
#
## Autodetect toolchain include dir from stdlib location
#
#TOOLCHAIN_INCLUDE_PATH_STDLIB_H = \
#	$(shell $(FIND) $(TOOLCHAIN_DIR) -type f -name stdlib.h)
#TOOLCHAIN_LIB_PATH_LDSCRIPTS = \
#	$(shell $(FIND) $(TOOLCHAIN_DIR) -type d -name ldscripts)
#
#TOOLCHAIN_INCLUDE_PATH = $(dir $(TOOLCHAIN_INCLUDE_PATH_STDLIB_H))
#
#TOOLCHAIN_LIB_PATH = $(dir $(TOOLCHAIN_LIB_PATH_LDSCRIPTS))
#
##$(info detected toolchain install stdlib at $(TOOLCHAIN_INCLUDE_PATH_STDLIB_H))
##$(info detected toolchain lib ldscripts at $(TOOLCHAIN_LIB_PATH_LDSCRIPTS))
#$(info detected toolchain install include path $(TOOLCHAIN_INCLUDE_PATH))
#$(info detected toolchain install lib path $(TOOLCHAIN_LIB_PATH))

# Bring in TOOLCHAIN_INCLUDE_PATH, TOOLCHAIN_LIB_PATH from bootstrap
include $(top_builddir)/toolchain_config.mk

trace-tool$(EXEEXT): $(top_srcdir)/pif-trace/pif-trace.cc
	$(CXX_FOR_BUILD) -ggdb3 -o "$@" \
		-D_GNU_SOURCE -D_DEFAULT_SOURCE \
		-std=c++17 \
		-fwhole-program -pthread \
		-O3 -march=native \
		-Wall -Wextra -Wpedantic \
		$^ \
		-Wl,--start-group \
		-lncurses -ltinfo -lgpm -ldl -lz \
		-Wl,--end-group

#-O3 -march=native

# ----------------------------------------------------------------------------
#

if userspace_so
TLS_MODEL_FLAGS = -ftls-model=global-dynamic
else
TLS_MODEL_FLAGS = -ftls-model=initial-exec
endif

# ----------------------------------------------------------------------------
# Inject stdlib headers into toolchain if they are newer

define deploy_toolchain_include=

$$(TOOLCHAIN_INCLUDE_PATH)$(1): $$(top_srcdir)/$(2)/include/$(1)
	mkdir -p $$(@D)
	$$(CP) $$< $$@

sysroot/include/$(1): $$(top_srcdir)/$(2)/include/$(1)
	mkdir -p $$(@D)
	$$(CP) $$< $$@

all: $$(TOOLCHAIN_INCLUDE_PATH)$(1) sysroot/include/$(1)

endef

STDLIB_INCLUDE_SRC = $(patsubst ./%,%,$(shell \
	cd $(abs_top_srcdir)/libc/include && $(FIND) -type f -name "*.h"))

USRLIB_INCLUDE_SRC = $(patsubst ./%,%,$(shell \
		cd $(abs_top_srcdir)/user/include && $(FIND) -type f -name "*.h"))

$(foreach include_file,$(STDLIB_INCLUDE_SRC), \
	$(eval $(call deploy_toolchain_include,$(include_file),libc)))

$(foreach include_file,$(USRLIB_INCLUDE_SRC), \
	$(eval $(call deploy_toolchain_include,$(include_file),user)))

define deploy_toolchain_lib=

$$(TOOLCHAIN_LIB_PATH)$(1).a: $(1).a
	mkdir -p $$(@D)
	$$(CP) $$< $$@

sysroot/lib/$(1).a: $(1).a
	mkdir -p $$(@D)
	$$(CP) $$< $$@

$$(TOOLCHAIN_LIB_PATH)32/$(1).a: $(1)32.a
	mkdir -p $$(@D)
	$$(CP) $$< $$@

sysroot/lib32/$(1).a: $(1)32.a
	mkdir -p $$(@D)
	$$(CP) $$< $$@

all: $$(TOOLCHAIN_LIB_PATH)$(1).a sysroot/lib/$(1).a \
	$$(TOOLCHAIN_LIB_PATH)32/$(1).a sysroot/lib32/$(1).a

endef

$(foreach lib,$(USRLIB_FILE_NAMES), \
	$(eval $(call deploy_toolchain_lib,lib$(lib))) \
)

# ----------------------------------------------------------------------------
# crt0

STDLIB_INCLUDES_NAMES = $(shell \
	cd $(top_srcdir)/libc/include && \
	$(FIND) -type f)

STDLIB_INCLUDES_DEPLOYED = \
	$(patsubst %,sysroot/include/%,$(STDLIB_INCLUDES_NAMES))

USRLIB_INCLUDES_NAMES = $(shell \
	cd "$(top_srcdir)/user/include" && \
	$(FIND) . -type f) zconf.h zlib.h

USRLIB_INCLUDES_DEPLOYED = \
	$(patsubst %,sysroot/include/%,$(USRLIB_INCLUDES_NAMES))

sysroot/lib/:
	$(MKDIR) -p "$@"

sysroot/lib32/:
	$(MKDIR) -p "$@"

define compilestartup =
STARTUPFILES += sysroot/lib/$(1)

sysroot/lib/$(1): \
		$(2) \
		$(top_srcdir)/libc/include/sys/cpu_bug.h \
		$(STDLIB_INCLUDES_DEPLOYED) \
		$(USRLIB_INCLUDES_DEPLOYED)
	$$(MKDIR) -p "$$(@D)" && \
		$$(CXX) \
			-g \
			$$(ASM_DEBUG_INFO_FLAGS) \
			--sysroot sysroot \
			-isystem=/include \
			-o "$$@" \
			-c "$$<"

sysroot/lib32/$(1): \
		$(2) \
		$(top_srcdir)/libc/include/sys/cpu_bug.h \
		$(STDLIB_INCLUDES_DEPLOYED) \
		$(USRLIB_INCLUDES_DEPLOYED)
	$$(MKDIR) -p "$$(@D)" && \
		$$(CXX) \
			-m32 \
			-g \
			$$(ASM_DEBUG_INFO_FLAGS) \
			--sysroot sysroot \
			-isystem=/include \
			-o "$$@" \
			-c "$$<"

endef

$(eval $(call \
	compilestartup,crt0.o,$(top_srcdir)/user/crt0/crt0.S \
))
$(eval $(call \
	compilestartup,crti.o,$(top_srcdir)/user/crt0/crti.S \
))
$(eval $(call \
	compilestartup,crtn.o,$(top_srcdir)/user/crt0/crtn.S \
))
$(eval $(call \
	compilestartup,crt0pc80.o,$(top_srcdir)/user/crt0/crt0pc80.S \
))
$(eval $(call \
	compilestartup,crt0pc64.o,$(top_srcdir)/user/crt0/crt0pc64.S \
))
$(eval $(call \
	compilestartup,crt0pc32.o,$(top_srcdir)/user/crt0/crt0pc32.S \
))
$(eval $(call \
	compilestartup,x32-crt0pc80.o,$(top_srcdir)/user/crt0/x32-crt0pc80.S \
))
$(eval $(call \
	compilestartup,x32-crt0pc64.o,$(top_srcdir)/user/crt0/x32-crt0pc64.S \
))
$(eval $(call \
	compilestartup,x32-crt0pc32.o,$(top_srcdir)/user/crt0/x32-crt0pc32.S \
))

#

define deploy_stdlib=

sysroot/lib/lib$(1).a: lib$(1).a
	$$(MKDIR) -p $$(@D) && "$$(CP)" -T "$$<" "$$@"

sysroot/lib32/lib$(1).a: lib$(1)32.a
	$$(MKDIR) -p $$(@D) && "$$(CP)" -T "$$<" "$$@"

endef

$(foreach name,$(STDLIB_FILE_NAMES), \
	$(eval $(call deploy_stdlib,$(name))) \
)

#$(foreach name,$(USRLIB_FILE_NAMES), \
#	$(eval $(call deploy_stdlib,$(name))) \
#)

define deploy_stdlib_header=
sysroot/include/$(1): $$(top_srcdir)/libc/include/$(1)
	$(MKDIR) -p $$(@D)
	"$(CP)" -T "$$<" "$$@"

endef

define deploy_usrlib_header=
sysroot/include/$(1): $$(top_srcdir)/user/include/$(1)
	$(MKDIR) -p $$(@D)
	"$(CP)" -T "$$<" "$$@"

endef

$(foreach header,$(STDLIB_INCLUDES_NAMES), \
	$(eval $(call deploy_stdlib_header,$(header))) \
)

$(foreach header,$(USRLIB_INCLUDES_NAMES), \
	$(eval $(call deploy_usrlib_header,$(header))) \
)

startupcode: \
	$(STARTUPFILES) \
	$(ALL_STDLIB_INSTALLED)

usrlib_headers: startupcode \
	$(ALL_USRLIB_INSTALLED)

.PHONY: startupcode
.PHONY: usrlib_headers

# ----------------------------------------------------------------------------
# Shell

bin_PROGRAMS += shell
generate_symbols_list += shell

shell_SOURCES = \
	user/shell/grammar.c \
	user/shell/parser.h \
	user/shell/parser.cc

shell_CXXFLAGS = \
	-DFROMCXXFLAGS  \
	$(COMPILER_FLAGS) \
	$(USER64_FLAGS) \
	$(USER64_EXE_FLAGS) \
	-isystem=/include

#$(RETPOLINE_FLAGS)

shell_CFLAGS = \
	$(shell_CXXFLAGS)

shell_CCASFLAGS = $(shell_CXXFLAGS)
shell_LDFLAGS = \
	-Wl,-Map,shell.map \
	-Lsysroot/lib

#-Wl,--orphan-handling,warn

shell_LDADD =

#-v -Wl,-verbose

$(top_srcdir)/user/shell/grammar.c: $(top_srcdir)/user/shell/grammar.y
	$(RM) -rf "$@"
	$(LEMON) "$<"

$(top_srcdir)/user/shell/grammar.h: $(top_srcdir)/user/shell/grammar.c


$(top_srcdir)/user/shell/grammar.out: $(top_srcdir)/user/shell/grammar.c


EXTRA_shell_DEPENDENCIES = \
	$(top_srcdir)/user/user64_phdrs.ld \
	$(top_srcdir)/user/shell/grammar.c

# ----------------------------------------------------------------------------
# libc

libc_adir = $(includedir)/libc

noinst_LIBRARIES += libc.a

libc_a_HEADERS = \
	libc/include/termios.h \
	libc/include/complex.h \
	libc/include/regex.h \
	libc/include/cpio.h \
	libc/include/pwd.h \
	libc/include/net/if.h \
	libc/include/wctype.h \
	libc/include/monetary.h \
	libc/include/nl_types.h \
	libc/include/wordexp.h \
	libc/include/mqueue.h \
	libc/include/assert.h \
	libc/include/syslog.h \
	libc/include/signal.h \
	libc/include/unistd.h \
	libc/include/stropts.h \
	libc/include/search.h \
	libc/include/libgen.h \
	libc/include/glob.h \
	libc/include/ulimit.h \
	libc/include/utime.h \
	libc/include/fnmatch.h \
	libc/include/spawn.h \
	libc/include/iconv.h \
	libc/include/fcntl.h \
	libc/include/stdio.h \
	libc/include/stdint.h \
	libc/include/setjmp.h \
	libc/include/sys/cpu_bug.h \
	libc/include/sys/syscall.h \
	libc/include/sys/resource.h \
	libc/include/sys/select.h \
	libc/include/sys/sem.h \
	libc/include/sys/socket.h \
	libc/include/sys/types.h \
	libc/include/sys/un.h \
	libc/include/sys/wait.h \
	libc/include/sys/utsname.h \
	libc/include/sys/stat.h \
	libc/include/sys/ipc.h \
	libc/include/sys/times.h \
	libc/include/sys/statvfs.h \
	libc/include/sys/msg.h \
	libc/include/sys/shm.h \
	libc/include/sys/time.h \
	libc/include/sys/cdefs.h \
	libc/include/sys/mman.h \
	libc/include/sys/uio.h \
	libc/include/sys/framebuffer.h \
	libc/include/semaphore.h \
	libc/include/arpa/inet.h \
	libc/include/fmtmsg.h \
	libc/include/pthread.h \
	libc/include/fenv.h \
	libc/include/aio.h \
	libc/include/dlfcn.h \
	libc/include/math.h \
	libc/include/poll.h \
	libc/include/wchar.h \
	libc/include/utmpx.h \
	libc/include/ctype.h \
	libc/include/sched.h \
	libc/include/tar.h \
	libc/include/ndbm.h \
	libc/include/time.h \
	libc/include/grp.h \
	libc/include/netdb.h \
	libc/include/string.h \
	libc/include/strings.h \
	libc/include/stdlib.h \
	libc/include/errno.h \
	libc/include/ftw.h \
	libc/include/inttypes.h \
	libc/include/dirent.h \
	libc/include/trace.h \
	libc/include/netinet/in.h \
	libc/include/netinet/tcp.h \
	libc/include/langinfo.h \
	libc/include/locale.h \
	libc/include/sys/socket.h \
	libc/include/sys/ioctl.h \
	libc/include/cassert \
	libc/include/cfenv \
	libc/include/climits \
	libc/include/csignal \
	libc/include/cstdint \
	libc/include/cstring \
	libc/include/cwctype \
	libc/include/cctype \
	libc/include/cfloat \
	libc/include/clocale \
	libc/include/cstdbool \
	libc/include/cstdio \
	libc/include/ctime \
	libc/include/cerrno \
	libc/include/cinttypes \
	libc/include/cmath \
	libc/include/csetjmp \
	libc/include/cstddef \
	libc/include/cstdlib

libc_a_SOURCES = \
	libc/src/assert/assert.cc \
	\
	libc/src/string/__bytebitmap.cc \
	libc/src/string/strsignal.cc \
	libc/src/string/strcoll_l.cc \
	libc/src/string/strerror.cc \
	libc/src/string/strlen.cc \
	libc/src/string/strdup.cc \
	libc/src/string/strtok.cc \
	libc/src/string/strnlen.cc \
	libc/src/string/strcpy.cc \
	libc/src/string/strcmp.cc \
	libc/src/string/memset.cc \
	libc/src/string/strndup.cc \
	libc/src/string/strcspn.cc \
	libc/src/string/memcmp.cc \
	libc/src/string/strrchr.cc \
	libc/src/string/strpbrk.cc \
	libc/src/string/memcpy.cc \
	libc/src/string/stpncpy.cc \
	libc/src/string/strtok_r.cc \
	libc/src/string/stpcpy.cc \
	libc/src/string/memccpy.cc \
	libc/src/string/strcat.cc \
	libc/src/string/strchr.cc \
	libc/src/string/strncpy.cc \
	libc/src/string/strncat.cc \
	libc/src/string/strstr.cc \
	libc/src/string/memmove.cc \
	libc/src/string/strspn.cc \
	libc/src/string/strcoll.cc \
	libc/src/string/strerror_r.cc \
	libc/src/string/strerror_l.cc \
	libc/src/string/strxfrm.cc \
	libc/src/string/memchr.cc \
	libc/src/string/strxfrm_l.cc \
	libc/src/string/strncmp.cc \
	\
	libc/src/new/operator-new.cc \
	\
	libc/src/dirent/opendir.cc \
	libc/src/dirent/closedir.cc \
	libc/src/dirent/fdopendir.cc \
	libc/src/dirent/readdir.cc \
	libc/src/dirent/rewinddir.cc \
	libc/src/dirent/telldir.cc \
	libc/src/dirent/dirfd.cc \
	libc/src/dirent/readdir_r.cc \
	libc/src/dirent/seekdir.cc \
	\
	libc/src/stdlib/new.cc \
	libc/src/stdlib/malloc_arena.cc	\
	libc/src/stdlib/malloc_arena.h	\
	libc/src/stdlib/_Exit.cc \
	libc/src/stdlib/abort.cc \
	libc/src/stdlib/abs.cc \
	libc/src/stdlib/malloc.cc \
	libc/src/stdlib/realloc.cc \
	libc/src/stdlib/calloc.cc \
	libc/src/stdlib/free.cc \
	\
	libc/src/fcntl/creat.cc \
	libc/src/fcntl/fcntl.cc \
	libc/src/fcntl/open.cc \
	libc/src/fcntl/openat.cc \
	libc/src/fcntl/posix_fadvise.cc \
	libc/src/fcntl/posix_fallocate.cc \
	\
	libc/src/stdio/bits/cfile.cc \
	libc/src/stdio/bits/cfile.h \
	libc/src/stdio/bits/formatter.cc \
	libc/src/stdio/bits/formatter.h \
	libc/src/stdio/clearerr.cc \
	libc/src/stdio/fclose.cc \
	libc/src/stdio/fdopen.cc \
	libc/src/stdio/feof.cc \
	libc/src/stdio/ferror.cc \
	libc/src/stdio/fflush.cc \
	libc/src/stdio/fgetpos.cc \
	libc/src/stdio/fgets.cc \
	libc/src/stdio/fileno.cc \
	libc/src/stdio/fopen.cc \
	libc/src/stdio/fprintf.cc \
	libc/src/stdio/fputc.cc \
	libc/src/stdio/fread.cc \
	libc/src/stdio/freopen.cc \
	libc/src/stdio/fseek.cc \
	libc/src/stdio/fsetpos.cc \
	libc/src/stdio/ftell.cc \
	libc/src/stdio/fwrite.cc \
	libc/src/stdio/printf.cc \
	libc/src/stdio/putchar.cc \
	libc/src/stdio/puts.cc \
	libc/src/stdio/remove.cc \
	libc/src/stdio/rename.cc \
	libc/src/stdio/rewind.cc \
	libc/src/stdio/setbuf.cc \
	libc/src/stdio/setvbuf.cc \
	libc/src/stdio/snprintf.cc \
	libc/src/stdio/stdin_out_err.cc \
	libc/src/stdio/tmpfile.cc \
	libc/src/stdio/tmpnam.cc \
	libc/src/stdio/vfprintf.cc \
	libc/src/stdio/vprintf.cc \
	libc/src/stdio/vsnprintf.cc \
	\
	libc/src/sys/indirect-thunk.S \
	\
	libc/src/sys/mman/mmap.cc \
	libc/src/sys/mman/munmap.cc \
	libc/src/sys/mman/mremap.cc \
	libc/src/sys/mman/mprotect.cc \
	libc/src/sys/mman/msync.cc \
	libc/src/sys/mman/mlock.cc \
	libc/src/sys/mman/munlock.cc \
	libc/src/sys/mman/madvise.cc \
	\
	libc/src/sys/ioctl/ioctl.cc \
	\
	libc/src/sys/time/clock_gettime.cc \
	libc/src/sys/time/clock_getres.cc \
	\
	libc/src/sys/tls/tls_get_addr.h \
	libc/src/sys/tls/tls_get_addr.cc \
	\
	libc/src/unistd/access.cc \
	libc/src/unistd/alarm.cc \
	libc/src/unistd/chdir.cc \
	libc/src/unistd/chown.cc \
	libc/src/unistd/close.cc \
	libc/src/unistd/confstr.cc \
	libc/src/unistd/crypt.cc \
	libc/src/unistd/dup2.cc \
	libc/src/unistd/dup.cc \
	libc/src/unistd/encrypt.cc \
	libc/src/unistd/execl.cc \
	libc/src/unistd/execle.cc \
	libc/src/unistd/execlp.cc \
	libc/src/unistd/execv.cc \
	libc/src/unistd/execve.cc \
	libc/src/unistd/execvp.cc \
	libc/src/unistd/_exit.cc \
	libc/src/unistd/faccessat.cc \
	libc/src/unistd/fchdir.cc \
	libc/src/unistd/fchownat.cc \
	libc/src/unistd/fchown.cc \
	libc/src/unistd/fdatasync.cc \
	libc/src/unistd/fexecve.cc \
	libc/src/unistd/fork.cc \
	libc/src/unistd/fpathconf.cc \
	libc/src/unistd/fsync.cc \
	libc/src/unistd/ftruncate.cc \
	libc/src/unistd/getcwd.cc \
	libc/src/unistd/getegid.cc \
	libc/src/unistd/geteuid.cc \
	libc/src/unistd/getgid.cc \
	libc/src/unistd/getgroups.cc \
	libc/src/unistd/gethostid.cc \
	libc/src/unistd/gethostname.cc \
	libc/src/unistd/getlogin.cc \
	libc/src/unistd/getlogin_r.cc \
	libc/src/unistd/getopt.cc \
	libc/src/unistd/getpgid.cc \
	libc/src/unistd/getpgrp.cc \
	libc/src/unistd/getpid.cc \
	libc/src/unistd/getppid.cc \
	libc/src/unistd/getsid.cc \
	libc/src/unistd/getuid.cc \
	libc/src/unistd/isatty.cc \
	libc/src/unistd/lchown.cc \
	libc/src/unistd/linkat.cc \
	libc/src/unistd/link.cc \
	libc/src/unistd/lockf.cc \
	libc/src/unistd/lseek.cc \
	libc/src/unistd/nice.cc \
	libc/src/unistd/pathconf.cc \
	libc/src/unistd/pause.cc \
	libc/src/unistd/pipe.cc \
	libc/src/unistd/pread.cc \
	libc/src/unistd/pwrite.cc \
	libc/src/unistd/read.cc \
	libc/src/unistd/readlinkat.cc \
	libc/src/unistd/readlink.cc \
	libc/src/unistd/rmdir.cc \
	libc/src/unistd/setegid.cc \
	libc/src/unistd/seteuid.cc \
	libc/src/unistd/setgid.cc \
	libc/src/unistd/setpgid.cc \
	libc/src/unistd/setpgrp.cc \
	libc/src/unistd/setregid.cc \
	libc/src/unistd/setreuid.cc \
	libc/src/unistd/setsid.cc \
	libc/src/unistd/setuid.cc \
	libc/src/unistd/sleep.cc \
	libc/src/unistd/swab.cc \
	libc/src/unistd/symlinkat.cc \
	libc/src/unistd/symlink.cc \
	libc/src/unistd/sync.cc \
	libc/src/unistd/sysconf.cc \
	libc/src/unistd/tcgetpgrp.cc \
	libc/src/unistd/tcsetpgrp.cc \
	libc/src/unistd/truncate.cc \
	libc/src/unistd/ttyname.cc \
	libc/src/unistd/ttyname_r.cc \
	libc/src/unistd/unlinkat.cc \
	libc/src/unistd/unlink.cc \
	libc/src/unistd/write.cc \
	\
	libc/src/errno/errno.cc \
	\
	libc/src/posix_spawn/posix_spawn.cc \
	libc/src/posix_spawn/posix_spawnp.cc \
	libc/src/posix_spawn/posix_spawn_file_actions_init.cc \
	libc/src/posix_spawn/posix_spawn_file_actions_destroy.cc \
	libc/src/posix_spawn/posix_spawn_file_actions_addopen.cc \
	libc/src/posix_spawn/posix_spawn_file_actions_adddup2.cc \
	libc/src/posix_spawn/posix_spawn_file_actions_addclose.cc \
	libc/src/posix_spawn/posix_spawnattr_init.cc \
	libc/src/posix_spawn/posix_spawnattr_destroy.cc \
	libc/src/posix_spawn/posix_spawnattr_setsigdefault.cc \
	libc/src/posix_spawn/posix_spawnattr_getsigdefault.cc \
	libc/src/posix_spawn/posix_spawnattr_setsigmask.cc \
	libc/src/posix_spawn/posix_spawnattr_getsigmask.cc \
	libc/src/posix_spawn/posix_spawnattr_setschedparam.cc \
	libc/src/posix_spawn/posix_spawnattr_getschedparam.cc \
	libc/src/posix_spawn/posix_spawnattr_getschedpolicy.cc \
	libc/src/posix_spawn/posix_spawnattr_setschedpolicy.cc \
	libc/src/posix_spawn/posix_spawnattr_setflags.cc \
	libc/src/posix_spawn/posix_spawnattr_getflags.cc \
	libc/src/posix_spawn/posix_spawnattr_setpgroup.cc \
	libc/src/posix_spawn/posix_spawnattr_getpgroup.cc \
	\
	libc/src/pthread/pthread_spin_trylock.cc \
	libc/src/pthread/pthread_rwlockattr_init.cc \
	libc/src/pthread/pthread_cancel.cc \
	libc/src/pthread/pthread_rwlock_timedwrlock.cc \
	libc/src/pthread/pthread_attr_getschedparam.cc \
	libc/src/pthread/pthread_rwlock_tryrdlock.cc \
	libc/src/pthread/pthread_rwlock_timedrdlock.cc \
	libc/src/pthread/pthread_mutexattr_settype.cc \
	libc/src/pthread/pthread_attr_setdetachstate.cc \
	libc/src/pthread/pthread_cond_signal.cc \
	libc/src/pthread/pthread_atfork.cc \
	libc/src/pthread/pthread_rwlock_rdlock.cc \
	libc/src/pthread/pthread_mutexattr_getrobust.cc \
	libc/src/pthread/pthread_setcancelstate.cc \
	libc/src/pthread/pthread_mutex_destroy.cc \
	libc/src/pthread/pthread_cond_broadcast.cc \
	libc/src/pthread/pthread_mutexattr_destroy.cc \
	libc/src/pthread/pthread_rwlock_unlock.cc \
	libc/src/pthread/pthread_spin_init.cc \
	libc/src/pthread/pthread_attr_setguardsize.cc \
	libc/src/pthread/pthread_cond_destroy.cc \
	libc/src/pthread/pthread_testcancel.cc \
	libc/src/pthread/pthread_cond_timedwait.cc \
	libc/src/pthread/pthread_setspecific.cc \
	libc/src/pthread/pthread_detach.cc \
	libc/src/pthread/pthread_barrierattr_init.cc \
	libc/src/pthread/pthread_condattr_init.cc \
	libc/src/pthread/pthread_rwlock_destroy.cc \
	libc/src/pthread/pthread_barrier_wait.cc \
	libc/src/pthread/pthread_once.cc \
	libc/src/pthread/pthread_attr_getguardsize.cc \
	libc/src/pthread/pthread_cond_init.cc \
	libc/src/pthread/pthread_condattr_setclock.cc \
	libc/src/pthread/pthread_equal.cc \
	libc/src/pthread/pthread_join.cc \
	libc/src/pthread/pthread_mutex_consistent.cc \
	libc/src/pthread/pthread_attr_init.cc \
	libc/src/pthread/pthread_self.cc \
	libc/src/pthread/pthread_attr_getdetachstate.cc \
	libc/src/pthread/pthread_spin_lock.cc \
	libc/src/pthread/pthread_barrier_destroy.cc \
	libc/src/pthread/pthread_mutex_lock.cc \
	libc/src/pthread/pthread_rwlock_init.cc \
	libc/src/pthread/pthread_cond_wait.cc \
	libc/src/pthread/pthread_key_create.cc \
	libc/src/pthread/pthread_mutex_unlock.cc \
	libc/src/pthread/pthread_mutex_timedlock.cc \
	libc/src/pthread/pthread_mutexattr_gettype.cc \
	libc/src/pthread/pthread_mutexattr_init.cc \
	libc/src/pthread/pthread_mutex_trylock.cc \
	libc/src/pthread/pthread_exit.cc \
	libc/src/pthread/pthread_getspecific.cc \
	libc/src/pthread/pthread_attr_destroy.cc \
	libc/src/pthread/pthread_mutexattr_setrobust.cc \
	libc/src/pthread/pthread_condattr_destroy.cc \
	libc/src/pthread/pthread_rwlock_trywrlock.cc \
	libc/src/pthread/pthread_key_delete.cc \
	libc/src/pthread/pthread_spin_destroy.cc \
	libc/src/pthread/pthread_barrier_init.cc \
	libc/src/pthread/pthread_setcanceltype.cc \
	libc/src/pthread/pthread_rwlockattr_destroy.cc \
	libc/src/pthread/pthread_create.cc \
	libc/src/pthread/pthread_condattr_getclock.cc \
	libc/src/pthread/pthread_spin_unlock.cc \
	libc/src/pthread/pthread_rwlock_wrlock.cc \
	libc/src/pthread/pthread_barrierattr_destroy.cc \
	libc/src/pthread/pthread_attr_setschedparam.cc \
	libc/src/pthread/pthread_mutex_init.cc \
	libc/src/pthread/__futex.cc \
	libc/src/pthread/__clone.cc \
	\
	libc/src/aio/aio_cancel.cc \
	libc/src/aio/aio_error.cc \
	libc/src/aio/aio_fsync.cc \
	libc/src/aio/aio_read.cc \
	libc/src/aio/aio_return.cc \
	libc/src/aio/aio_suspend.cc \
	libc/src/aio/aio_write.cc \
	\
	libc/src/stat/chmod.cc \
	libc/src/stat/fchmodat.cc \
	libc/src/stat/fchmod.cc \
	libc/src/stat/fstatat.cc \
	libc/src/stat/fstat.cc \
	libc/src/stat/futimens.cc \
	libc/src/stat/lstat.cc \
	libc/src/stat/mkdirat.cc \
	libc/src/stat/mkdir.cc \
	libc/src/stat/mkfifoat.cc \
	libc/src/stat/mkfifo.cc \
	libc/src/stat/mknodat.cc \
	libc/src/stat/mknod.cc \
	libc/src/stat/stat.cc \
	libc/src/stat/umask.cc \
	libc/src/stat/utimensat.cc \
	\
	libc/src/signal/bits/trampoline.S \
	libc/src/signal/setjmp.S \
	libc/src/signal/sigaction.cc \
	libc/src/signal/sigaddset.cc \
	libc/src/signal/kill.cc \
	libc/src/signal/signal.cc \
	libc/src/signal/raise.cc \
	libc/src/signal/sigismember.cc \
	libc/src/signal/sigemptyset.cc \
	libc/src/signal/sigfillset.cc \
	\
	libc/src/sys/socket/socket.cc \
	libc/src/sys/module/init_module.cc \
	libc/src/sys/module/probe_pci_for.cc \
	libc/src/sys/framebuffer/framebuffer_enum.cc \
	\
	libc/src/sys/syscall0.S \
	libc/src/sys/syscall1.S \
	libc/src/sys/syscall2.S \
	libc/src/sys/syscall3.S \
	libc/src/sys/syscall4.S \
	libc/src/sys/syscall5.S \
	libc/src/sys/syscall6.S \
	\
	$(libc_a_HEADERS)

libc_a_CXXFLAGS = \
	-isystem $(top_srcdir)/libc/include \
	$(FREESTANDING_FLAGS) \
	$(OPTIMIZE_SPEED_FLAGS) \
	$(COMPILER_FLAGS)

libc_a_CCASFLAGS = $(libc_a_CXXFLAGS)

EXTRA_libc_a_DEPENDENCIES =

# libc32.a 32-bit

noinst_LIBRARIES += libc32.a
generate_symbols_list += libc32.a

libc32_a_SOURCES = $(libc_a_SOURCES)
libc32_a_CXXFLAGS = $(libc_a_CXXFLAGS) $(USERLIB32_FLAGS)
libc32_a_CCASFLAGS = $(libc32_a_CXXFLAGS)
libc32_a_CFLAGS = $(libc_a_CFLAGS) $(USERLIB32_FLAGS)
EXTRA_libc32_a_DEPENDENCIES = $(EXTRA_libc_a_DEPENDENCIES)

# libc.so 64-bit

if userspace_so
bin_PROGRAMS += libc.so
generate_symbols_list += libc.so

libc_so_SOURCES = $(libc_a_SOURCES)

libc_so_CXXFLAGS = $(libc_a_CXXFLAGS) \
	$(USERLIB64_FLAGS) \
	$(LIB_SO_FLAGS) $(TLS_MODEL_FLAGS)

libc_so_CFLAGS = $(libc_a_CFLAGS) \
	$(LIB_SO_FLAGS)

libc_so_CCASFLAGS = $(libc_a_CCASFLAGS) \
	$(LIB_SO_FLAGS)

libc_so_LDFLAGS = $(libc_a_LDFLAGS) \
	-isystem $(top_srcdir)/libc/include \
	$(LIB_SO_FLAGS) \
	$(USERLIB64_LDFLAGS) \
	$(NOSTDLIB_FLAGS)

EXTRA_libc_so_DEPENDENCIES = $(EXTRA_libc_a_DEPENDENCIES)
endif

noinst_LIBRARIES += libm.a

libm_a_SOURCES = \
	libc/math/cos.cc \
	libc/math/sin.cc \
	libc/math/log.cc

libm_a_CXXFLAGS = \
	-isystem $(top_srcdir)/libc/include \
	$(OPTIMIZE_SPEED_FLAGS) \
	$(COMPILER_FLAGS) \
	$(USERLIB64_FLAGS)

# libm.a 32-bit

noinst_LIBRARIES += libm32.a

libm32_a_SOURCES = $(libm_a_SOURCES)

libm32_a_CXXFLAGS = \
	$(libm_a_CXXFLAGS) \
	$(USERLIB32_FLAGS)

libm32_a_CFLAGS = \
	$(libm_a_CFLAGS) \
	$(USERLIB32_FLAGS)

libm32_a_CCASFLAGS = \
	$(libm_a_CCASFLAGS) \
	$(USERLIB32_FLAGS)

EXTRA_libm32_a_DEPENDENCIES = $(EXTRA_libm_a_DEPENDENCIES)

if userspace_so
# libm.so 64-bit

bin_PROGRAMS += libm.so

libm_so_SOURCES = $(libm_a_SOURCES) $(LIB_SO_FLAGS)
libm_so_CXXFLAGS = $(libm_a_CXXFLAGS) $(LIB_SO_FLAGS)
libm_so_CFLAGS = $(libm_a_CFLAGS) $(LIB_SO_FLAGS)
libm_so_CCASFLAGS = $(libm_a_CCASFLAGS) $(LIB_SO_FLAGS)
libm_so_LDFLAGS = $(libm_a_LDFLAGS) $(LIB_SO_FLAGS) \
    $(USER64_LDFLAGS) \
    $(USERLIB64_LDFLAGS)
EXTRA_libm_so_DEPENDENCIES = $(EXTRA_libm_a_DEPENDENCIES)
libm_so_LDADD = -lgcc

# libm32.so 32-bit

bin_PROGRAMS += libm32.so

libm32_so_SOURCES = $(libm_so_SOURCES) $(LIB_SO_FLAGS)
libm32_so_CXXFLAGS = $(libm_so_CXXFLAGS) $(LIB_SO_FLAGS) \
	$(COMPILER_FLAGS) \
	$(USER32_FLAGS) \
	$(USERLIB32_FLAGS)

libm32_so_CFLAGS = $(libm_so_CFLAGS) $(LIB_SO_FLAGS) \
	$(COMPILER_FLAGS) \
	$(USER32_FLAGS) \
	$(USERLIB32_FLAGS)

libm32_so_CCASFLAGS = $(libm_so_CCASFLAGS) $(LIB_SO_FLAGS) \
	$(COMPILER_FLAGS) \
	$(USER32_FLAGS) \
	$(USERLIB32_FLAGS)
libm32_so_LDFLAGS = $(libm_so_LDFLAGS) $(LIB_SO_FLAGS) \
	$(COMPILER_FLAGS) \
	$(USER32_LDFLAGS) \
	$(USERLIB32_LDFLAGS)

EXTRA_libm32_so_DEPENDENCIES = $(EXTRA_libm_so_DEPENDENCIES)
libm32_so_LDADD = -lgcc
endif

# libstdc++.a 64-bit

noinst_LIBRARIES += libstdc++.a

libstdc___a_SOURCES = \
	libc/cxx/terminate.cc \
	libc/cxx/abi/cxa_allocate_exception.cc

libstdc___a_CXXFLAGS = \
	-isystem $(top_srcdir)/libc/include \
	$(FREESTANDING_FLAGS) \
	$(OPTIMIZE_SPEED_FLAGS) \
	$(COMPILER_FLAGS) \
	$(USERLIB64_FLAGS) \
	$(NOSTDLIB_FLAGS)

# libstdc++32.a 32-bit

noinst_LIBRARIES += libstdc++32.a

libstdc__32_a_SOURCES = \
	$(libstdc___a_SOURCES)

libstdc__32_a_CXXFLAGS = \
	$(libstdc___a_CXXFLAGS) \
	$(USERLIB32_FLAGS)

libstdc__32_a_CFLAGS = \
	$(libstdc___a_CFLAGS) \
	$(USERLIB32_FLAGS)

if userspace_so
# libstdc++32.so 32-bit

noinst_PROGRAMS += libstdc++32.so

libstdc__32_so_SOURCES = \
	$(libstdc___a_SOURCES)

libstdc__32_so_CXXFLAGS = \
	$(libstdc___a_CXXFLAGS) \
	$(USER32_FLAGS) \
	$(USERLIB32_FLAGS)

libstdc__32_so_CFLAGS = \
	$(libstdc___a_CXXFLAGS) \
	$(USER32_FLAGS) \
	$(USERLIB32_FLAGS)

libstdc__32_so_LDFLAGS = \
	$(libstdc___so_LDFLAGS) \
	$(USER32_LDFLAGS) \
	$(USERLIB32_LDFLAGS)

bin_PROGRAMS += libstdc++.so

libstdc___so_SOURCES = \
	libc/cxx/terminate.cc \
	libc/cxx/abi/cxa_allocate_exception.cc

libstdc___so_CXXFLAGS = \
	-isystem $(top_srcdir)/libc/include \
	$(FREESTANDING_FLAGS) \
	$(OPTIMIZE_SPEED_FLAGS) \
	$(COMPILER_FLAGS) \
	$(USERLIB64_FLAGS) \
	$(NOSTDLIB_FLAGS)

libstdc___so_LDFLAGS = \
	$(libstdc___a_LDFLAGS) \
	$(USERLIB64_LDFLAGS) \
	$(LIB_SO_FLAGS) \
	$(NOSTDLIB_FLAGS)
endif

# ----------------------------------------------------------------------------
# libc unit tests

LIBC_TESTS = \
	$(top_srcdir)/libc/tests/testassert.cc \
	$(top_srcdir)/libc/tests/test_string.cc

LIBC_CXXFLAGS = \
	$(COMPILER_FLAGS) \
	$(NO_STACKPROTECTOR_FLAGS) \
	$(FREESTANDING_FLAGS) \
	$(ASM_DEBUG_INFO_FLAGS) \
	-isystem $(top_srcdir)/libc/include \
	-I$(top_builddir) \
	-L$(top_builddir)

#$(NO_EXCEPTIONS_FLAGS)
#$(NO_EXCEPTIONS_FLAGS)
#$(NO_EXCEPTIONS_FLAGS)

libc_tests: $(LIBC_TESTS) sysroot/lib/libc.a
	echo "#define TERMESC_RED" \
		"\"$$(tput setaf 1 | sed 's/\x1b/\\x1b/g')\"" \
		> termesc.h
	echo "#define TERMESC_GREEN" \
		"\"$$(tput setaf 2 | sed 's/\x1b/\\x1b/g')\"" \
		>> termesc.h
	echo "#define TERMESC_BLUE" \
		"\"$$(tput setaf 4 | sed 's/\x1b/\\x1b/g')\"" \
		>> termesc.h
	echo "#define TERMESC_WHITE" \
		"\"$$(tput setaf 7 | sed 's/\x1b/\\x1b/g')\"" \
		>> termesc.h

	$(CXX_FOR_BUILD) \
		$(LIBC_CXXFLAGS) \
		-o libc_tests \
		$(LIBC_TESTS) \
		-static -nostdlib -g -fno-builtin \
		$(ALL_STDLIB_INSTALLED) -lgcc

test_compile: libc_tests

test: test_compile
	libc_tests

.PHONY: test_compile test

# ----------------------------------------------------------------------------
# iibg

noinst_LIBRARIES += libg.a

libg_a_SOURCES = \
	libc/libg/debug.cc

libg_a_CFLAGS = $(LIBC_CXXFLAGS)
libg_a_CXXFLAGS = $(LIBC_CXXFLAGS)
libg_a_CCASFLAGS = $(LIBC_CXXFLAGS)

#x if userspace_so
#x bin_PROGRAMS += libg.so
#x libg_so_SOURCES = $(libg_a_SOURCES) $(LIB_SO_FLAGS)
#x libg_so_CXXFLAGS = $(libg_a_CXXFLAGS) $(LIB_SO_FLAGS)
#x libg_so_CFLAGS = $(libg_a_CFLAGS) $(LIB_SO_FLAGS)
#x libg_so_CCASFLAGS = $(libg_a_CCASFLAGS) $(LIB_SO_FLAGS)
#x libg_so_LDFLAGS = $(libg_a_LDFLAGS) $(LIB_SO_FLAGS)
#x EXTRA_libg_so_DEPENDENCIES = $(EXTRA_libg_a_DEPENDENCIES)
#x endif

noinst_LIBRARIES += libg32.a

libg32_a_SOURCES = $(libg_a_SOURCES)
libg32_a_CFLAGS = $(LIBC_CXXFLAGS) $(USERLIB32_FLAGS)
libg32_a_CXXFLAGS = $(LIBC_CXXFLAGS) $(USERLIB32_FLAGS)
libg32_a_CCASFLAGS = $(LIBC_CXXFLAGS) $(USERLIB32_FLAGS)

# ----------------------------------------------------------------------------
# User programs

bin_PROGRAMS += dhcpclient
generate_symbols_list += dhcpclient

dhcpclient_SOURCES = \
	user/bin/dhcpclient/dhcpclient.cc

dhcpclient_CXXFLAGS = -isystem sysroot/include

dhcpclient_LDADD =

EXTRA_dhcpclient_DEPENDENCIES = \
	$(INCLUDES_DEPLOYED)

bin_PROGRAMS += ls
generate_symbols_list += ls

ls_SOURCES = \
	user/bin/ls/ls.cc

ls_CXXFLAGS = -isystem sysroot/include

EXTRA_ls_DEPENDENCIES = \
	$(INCLUDES_DEPLOYED)

include Make-modules.inc.mk

#===========

noinst_LIBRARIES += libwing.a

libwing_a_SOURCES = \
	user/libwing/window.cc \
	user/libwing/window.h

libwing_a_CXXFLAGS = \
	-DFROMCXXFLAGS  \
	$(COMPILER_FLAGS) \
	$(USER64_FLAGS) \
	$(USER64_EXE_FLAGS)

libwing_a_CFLAGS = $(libwing_a_CXXFLAGS)
libwing_a_CCASFLAGS = $(libwing_a_CXXFLAGS)
EXTRA_libwing_a_DEPENDENCIES =

#===========

noinst_LIBRARIES += libutf.a

libutf_a_SOURCES = \
	user/libutf/utf.cc

libutf_a_CXXFLAGS = \
	$(COMPILER_FLAGS) \
	$(USER64_FLAGS) \
	$(USER64_EXE_FLAGS)

libutf_a_CFLAGS = $(libutf_a_CXXFLAGS)
libutf_a_CCASFLAGS = $(libutf_a_CXXFLAGS)

EXTRA_libutf_a_DEPENDENCIES = \
	$(INCLUDES_DEPLOYED)

#===========

noinst_LIBRARIES += libpng.a

libpng_a_SOURCES = \
	user/libpng/png.cc \
	user/libpng/surface.cc \
	user/include/png.h \
	user/include/surface.h

libpng_a_CXXFLAGS = \
	-DFROMCXXFLAGS  \
	$(COMPILER_FLAGS) \
	$(USER64_FLAGS) \
	$(USER64_EXE_FLAGS) \
	-I$(top_srcdir)/user/libutf \
	-I$(top_srcdir)/user/include

libpng_a_CFLAGS = \
	-DFROMCFLAGS  \
	-ggdb \
	$(COMPILER_FLAGS) \
	$(USER64_FLAGS) \
	$(USER64_EXE_FLAGS)

libpng_a_CCASFLAGS = \
	$(ASM_DEBUG_INFO_FLAGS) \
	$(COMPILER_FLAGS)

EXTRA_libpng_a_DEPENDENCIES = \
	$(INCLUDES_DEPLOYED)

#===========

noinst_LIBRARIES += libpng32.a

libpng32_a_SOURCES = $(libpng_a_SOURCES)

libpng32_a_CXXFLAGS = \
	-DFROMCXXFLAGS  \
	$(COMPILER_FLAGS) \
	$(USER32_FLAGS) \
	$(USER32_EXE_FLAGS)

libpng32_a_CFLAGS = \
	-DFROMCFLAGS  \
	$(COMPILER_FLAGS) \
	$(USER32_FLAGS) \
	$(USER32_EXE_FLAGS)

libpng32_a_CCASFLAGS = $(libpng_a_CCASFLAGS)

EXTRA_libpng32_a_DEPENDENCIES = $(EXTRA_libpng_a_DEPENDENCIES)

#===========

libz_SOURCES_COMMON = \
	user/zlib/adler32.c   \
	user/zlib/crc32.c     \
	user/zlib/gzclose.c   \
	user/zlib/gzread.c    \
	user/zlib/infback.c   \
	user/zlib/inflate.c   \
	user/zlib/trees.c     \
	user/zlib/zutil.c	  \
	user/zlib/compress.c  \
	user/zlib/deflate.c   \
	user/zlib/gzlib.c     \
	user/zlib/gzwrite.c   \
	user/zlib/inffast.c   \
	user/zlib/inftrees.c  \
	user/zlib/uncompr.c

libz_FLAGS_COMMON = \
	--sysroot sysroot \
	-isystem=/include \
	-Wno-implicit-fallthrough \
	-DNO_UNDERLINE \
	-DHAVE_MEMCPY \
	-DHAVE_HIDDEN \
	-DHAVE_VSNPRINTF

noinst_LIBRARIES += libz.a

if x86_64
libz_SOURCES_COMMON += \
	user/zlib/contrib/amd64/amd64-match.S
endif

libz_a_SOURCES = \
	$(libz_SOURCES_COMMON)

libz_a_CFLAGS = \
	$(COMPILER_FLAGS) \
	$(USER64_FLAGS) \
	$(USERLIB64_FLAGS) \
	$(libz_FLAGS_COMMON)

if x86_64
libz_a_CFLAGS += -DASMV
endif

libz_a_CXXFLAGS = $(libz_a_CFLAGS)

libz_a_CCASFLAGS = \
	$(libz_a_CFLAGS)

EXTRA_libz_a_DEPENDENCIES =

#===========

noinst_LIBRARIES += libz32.a

libz32_a_SOURCES = \
	user/zlib/adler32.c   \
	user/zlib/crc32.c     \
	user/zlib/gzclose.c   \
	user/zlib/gzread.c    \
	user/zlib/infback.c   \
	user/zlib/inflate.c   \
	user/zlib/trees.c     \
	user/zlib/zutil.c	  \
	user/zlib/compress.c  \
	user/zlib/deflate.c   \
	user/zlib/gzlib.c     \
	user/zlib/gzwrite.c   \
	user/zlib/inffast.c   \
	user/zlib/inftrees.c  \
	user/zlib/uncompr.c

if x86_64
libz32_a_SOURCES += \
	user/zlib/contrib/asm686/match.S
endif

libz32_a_CFLAGS = \
	$(COMPILER_FLAGS) \
	$(USER32_FLAGS) \
	$(USER32_EXE_FLAGS) \
	$(libz_FLAGS_COMMON)

if x86_64
libz32_a_CFLAGS += -DASMV
endif

libz32_a_CCASFLAGS = \
	$(libz32_a_CFLAGS)

libz32_a_CXXFLAGS = $(libz32_a_CFLAGS)

# ----------------------------------------------------------------------------
# Misc make rules

$(DUMPDIR):
	$(MKDIR) -p dump

#include zlib.mk
include $(top_srcdir)/symbols.mk
include $(top_srcdir)/diskfat.mk
include $(top_srcdir)/diskiso.mk

clean-local:
	$(RM) -f mbr-bin
	$(RM) -f bootfat-bin
	$(RM) -f bootiso-bin
	$(RM) -f bootpxe-bios-bin
	$(RM) -f bootpxe-bios-elf
	$(RM) -f trace-tool

	$(RM) -f bootefi-pe
	$(RM) -f boot*.efi

	$(RM) -f *.sym

	$(RM) -f *.map
	$(RM) -f background.png

	$(RM) -f "*.dis.gz"
	$(RM) -f "bochs-debuglog"
	$(RM) -f "mbrdisk.img"
	$(RM) -f "gptdisk.img"
	$(RM) -f "hybdisk.img"
	$(RM) -f "fatpart.img"
	$(RM) -f "isodisk.iso"
	$(RM) -f "initrd"
	$(RM) -f "initrd-light"

	$(RM) -f "boot1-bin"
	$(RM) -f "dgos-kernel-asan"
	$(RM) -f "dgos-kernel-generic"
	$(RM) -f "dgos-kernel-tracing"
	$(RM) -f "u_vga16.raw"
	$(RM) -rf "stage"
	$(RM) -rf "iso_stage"

distclean-local:
	$(RM) -rf extern

# ----------------------------------------------------------------------------
# Generate register definitions

BITFIELD_FILES += \
	$(top_srcdir)/kernel/device/nvme/nvme.bits \
	$(top_srcdir)/kernel/device/usb_hid/usb_hid.bits \
	$(top_srcdir)/kernel/device/usb_audio/usb_audio.bits \
	$(top_srcdir)/kernel/device/pci.bits \
	$(top_srcdir)/kernel/device/rtl8139/rtl8139.bits \
	$(top_srcdir)/kernel/device/i350/i350.bits \
	$(top_srcdir)/kernel/device/usb_xhci/usb_xhci.bits \
	$(top_srcdir)/kernel/device/acpi.bits \
	$(top_srcdir)/kernel/device/ahci/ahci.bits \
	$(top_srcdir)/kernel/device/es137x/es137x.bits \
	$(top_srcdir)/kernel/net/ipv4.bits

if aarch64
BITFIELD_FILES += \
	$(top_srcdir)/kernel/arch/aarch64/reg_bits.bits
endif

# 1=path to bits file
define bitfield_gen =
$(1).h: $(1)
	$$(RM) -f "$$@"
	$$(top_srcdir)/genregs.py "$$<" "$$(top_srcdir)" > "$$@"

$(1).h: $$(top_srcdir)/genregs.py

.PRECIOUS: $(1).h

endef

$(foreach bitsfile,$(BITFIELD_FILES), \
	$(eval $(call bitfield_gen,$(bitsfile))) \
)

OFFSET_FILES = \
	$(top_srcdir)/kernel/arch/x86_64/cpu/cpu_info.ofs \
	$(top_srcdir)/kernel/arch/x86_64/cpu/thread_info.ofs

define offsets_gen =
$(1).h: $(1)
	$$(RM) -f "$$@"
	$$(top_srcdir)/genoffsets.py -c "$$<" -- $(kernel_generic_CXXFLAGS)

.PRECIOUS: $(1).h

$(1).h: $$(top_srcdir)/genoffsets.py

endef

$(foreach offsetfile,$(OFFSET_FILES), \
	$(eval $(call offsets_gen,$(offsetfile))) \
)

generated_headers = $(patsubst %,%.h,$(BITFIELD_FILES)) \
	$(patsubst %,%.h,$(OFFSET_FILES))

# ----------------------------------------------------------------------------
# Unicode VGA font

u_vga16.raw: u_vga16.bdf $(top_srcdir)/genfont.py
	$(top_srcdir)/genfont.py < $< > $@

# Fix the stupid section attributes it puts on binary inclusion section
u_vga16.o: u_vga16.raw
	$(LD) -r -b binary $< -o $@	
	$(OBJCOPY) \
		--rename-section .data=.rodata \
		--set-section-flags .data=load,readonly,data \
		$@

# ----------------------------------------------------------------------------
# Randomize RAM content

#random-mem.img:
#	echo Building $(QEMU_RAM) random initial memory content image...
#	$(TRUNCATE) --size $(QEMU_RAM) "$@"
#	$(SHRED) --iterations=1 "$@"


# ----------------------------------------------------------------------------
# Directory tree staging

MODULE_FILENAMES = $(filter %.km,$(bin_PROGRAMS))

LIBRARY_FILENAMES = $(filter lib%.a,$(bin_PROGRAMS))

MODULE_LIST = $(subst %,%,$(MODULE_FILENAMES))

SYMBOL_FILE = sym/$(1).sym

MODULES_STAGED_HD = \
	$(patsubst %,stage/boot/%,$(MODULE_FILENAMES))

MODULE_CPIO_PATHS = $(patsubst %,boot/%,$(MODULE_FILENAMES)) \
	$(generate_symbols_outputs)

MODULE_CPIO_LIGHT_PATHS = $(patsubst %,boot/%,$(MODULE_FILENAMES))

define stage_file_to=

$(2): $(1)
	$$(MKDIR) -p $$(@D)
	$$(CP) -T $$< $$@

fatpart.img: $(2)

isodisk.iso: $(2)

#$$(info Staging $(1) to $(2))

endef

define stage_file=

$(eval $(call stage_file_to,$(1),stage$(2)/$(1)))
$(eval $(call stage_file_to,$(1),iso_stage$(2)/$(1)))

endef

$(foreach name,$(MODULE_FILENAMES), \
	$(eval $(call stage_file,$(name),/boot)) \
)

$(foreach name,$(KERNEL_NAMES_STRIPPED), \
	$(eval $(call stage_file,$(name),/boot)) \
)

$(foreach name,$(noinst_LIBRARIES), \
	$(eval $(call stage_file,$(name),/usr/lib)) \
)

$(eval $(call stage_file,init,/boot))
$(eval $(call stage_file,background.png,/usr/share))

$(eval $(call stage_file,bootpxe-bios-bin,/boot))

BOOT_FILES += \
	bootefi \
	kernel-generic \
	kernel-tracing \
	kernel-asan

SBIN_FILES = \
	shell \
	init

LIB_FILES = \
	libc.a \
	libstdc++.a \
	libc32.a

# ISO only (EFI boot partition)
iso_stage/EFI/boot/fatpart.img: fatpart.img
	"$(MKDIR)" -p "$(@D)"
	"$(LN)" -fsTr "$<" "$@"

isodisk.iso: iso_stage/EFI/boot/fatpart.img

$(foreach name,$(BOOT_FILES), \
	$(eval $(call stage_file,$(name),/boot)) \
)

$(foreach name,$(SBIN_FILES), \
	$(eval $(call stage_file,$(name),/sbin)) \
)

$(foreach name,$(LIB_FILES), \
	$(eval $(call stage_file,$(name),/lib)) \
)

$(eval $(call stage_file,bootx64.efi,/EFI/boot))

CPIO_LIST = $(MODULES_STAGED_HD) \
	$(generate_symbols_outputs)

STAGED_SYMS = \
	$(patsubst %,stage/sym/%.sym,$(generate_symbols_list)) \
	$(patsubst %,stage/sym/%-kallsyms,$(generate_kallsym_list)) \
	$(patsubst %,stage/sym/%-klinesyms,$(generate_kallsym_list))

STAGED_SYMS_CPIO_PATHS = $(patsubst stage/%,%,$(STAGED_SYMS))

SBIN_PATHS = $(patsubst %,sbin/%,$(SBIN_FILES))

$(foreach name,$(STAGED_SYMS_CPIO_PATHS), \
	$(eval $(call stage_file,$(name))) \
)

all-kernel: $(KERNEL_NAMES) $(MODULE_LIST) initrd initrd-light

.PHONY: all-kernel

background.png: $(top_srcdir)/user/background.png
	$(CP) -T "$<" "$@"

CPIO_PATHS = \
	$(MODULE_CPIO_PATHS) \
	$(STAGED_SYMS_CPIO_PATHS) \
	$(SBIN_PATHS)

CPIO_LIGHT_PATHS = \
	$(MODULE_CPIO_PATHS) \
	$(STAGED_SYMS_CPIO_PATHS) \
	$(SBIN_PATHS)

initrd: $(patsubst %,stage/%,$(CPIO_PATHS))
	(cd stage && $(CPIO) -L -o --device-independent -H bin \
		< <(printf "%s\n" $(CPIO_PATHS)) \
		> "$(@D)/../$(@F)")

initrd-light: $(patsubst %,stage/%,$(CPIO_LIGHT_PATHS))
	(cd stage && $(CPIO) -L -o --device-independent -H bin \
		< <(printf "%s\n" $(CPIO_LIGHT_PATHS)) \
		> "$(@D)/../$(@F)")

$(eval $(call stage_file,initrd,/boot))
$(eval $(call stage_file,initrd-light,/boot))

# ----------------------------------------------------------------------------
# QEMU launcher

$(DUMPDIR)/qemu-debug-out:
	$(MKDIR) -p "$(@D)"
	mkfifo "$@"

$(DUMPDIR)/call-trace-out:
	$(MKDIR) -p "$(@D)"
	mkfifo "$@"

QEMU_EXTRA_DEPS = \
	$(DUMPDIR)/qemu-debug-out \
	$(DUMPDIR)/call-trace-out

#random-mem.img

QEMU_CPUS = $(shell $(NPROC))
QEMU_THREADS = 1
QEMU_CORES = $(shell echo $$(( $(QEMU_CPUS) / $(QEMU_THREADS) )))
QEMU_CPU = host,migratable=false,host-cache-info=true

QEMU_RAM = 8G

QEMU_MEMFILL =
#QEMU_MEMFILL = \
#	-object memory-backend-file,id=ram-node0,mem-path="random-mem.img",size=$(QEMU_RAM),prealloc=no \
#	-numa node,nodeid=0,memdev=ram-node0

QEMU_USB_ROOT_PORTS ?= 16

# Puts keyboard, mouse, tablet on usb 2 root hub and audio on usb 3 root hub
QEMU_USB = \
	-device qemu-xhci,id=xhci,p2=$(QEMU_USB_ROOT_PORTS),p3=$(QEMU_USB_ROOT_PORTS),streams=on \
	-device usb-kbd,id=hidkbd,bus=xhci.0 \
	-device usb-tablet,id=hidtab,bus=xhci.0 \
	-device usb-mouse,id=hidmse,bus=xhci.0 \
	$(QEMU_USB_EXTRA)

#-device usb-audio,id=hidaud,bus=xhci.0

#-device usb-hub,id=hidhub,bus=xhci.0,ports=4,port=1
#-device usb-kbd,bus=hidhub.0 \
#-device usb-tablet,bus=hidhub.0 \
#-device usb-mouse,bus=hidhub.0

#-device usb-storage,bus=xhci.0,drive=stick
#-drive if=none,id=stick,file=usb_disk.img,format=raw,cache=none
#-device usb-audio,bus=xhci.0
#-device usb-net,bus=xhci.0
#-device usb-mtp,bus=xhci.0,x-root=$(builddir)
#-drive if=none,id=scsidrv,file=scsi_disk.img,format=raw,cache=none
#-device scsi-hd,drive=scsidrv
#-device usb-uas,bus=xhci.0,id=uas
#-device nec-usb-xhci,id=xhci,p2=16,p3=16,msix=on,streams=on
#-device usb-storage,bus=xhci.0,drive=stick

QEMU_NET = \
	-net nic,model=rtl8139,id=nic_rtl8139,netdev=n1 \
	$(QEMU_BRIDGE)

#-net user

#	-object filter-dump,file=dump/netdump_rtl8139.pcap,netdev=nic_rtl8139,id=pcap \
#	-nic model=ne2k_pci,id=nic_ne2k
#	-nic model=e1000,id=nic_e1000

QEMU_MONITOR = \
	-chardev socket,id=qemu-monitor,host=localhost,port=7777,server,nowait,telnet \
	-mon qemu-monitor,mode=readline

#-chardev pipe,path=$(DUMPDIR)/qemu-debug-out,id=qemu-debug-out
#-device isa-debugcon,chardev=qemu-debug-out
#

QEMU_DEBUGCON = \
	-chardev pipe,path=$(DUMPDIR)/call-trace-out,id=call-trace-out \
	-device isa-debugcon,iobase=0xEA,chardev=call-trace-out \
	\
	-chardev stdio,id=seabios \
	-device isa-debugcon,iobase=0x402,chardev=seabios

#-chardev tty,id=qemu-serial-socket,path=/dev/ttyS0

QEMU_SERIAL = \
	-chardev file,path=$(DUMPDIR)/qemu-debug-out,id=qemu-debug-out \
	-device isa-serial,chardev=qemu-debug-out,iobase=0x3f8,irq=4,id=com1 \
	\
	-chardev socket,id=qemu-symsrv-socket,host=localhost,port=7789,server,nowait,nodelay \
	-device isa-serial,chardev=qemu-symsrv-socket,iobase=0x2f8,irq=3,id=com2 \
	\
	-chardev socket,id=qemu-serial-socket,host=localhost,port=7788,server,nowait,nodelay \
	-device isa-serial,chardev=qemu-serial-socket,iobase=0x3e8,irq=5,id=com3

#QEMU_SOUND = -device es1370
QEMU_SOUND =

QEMU_DEBUG = -no-shutdown -no-reboot -d unimp,guest_errors,cpu_reset$(QEMU_EXTRA_D)
QEMU_TEST = -no-reboot -d unimp,guest_errors

QEMU_COMMON = \
	-m $(QEMU_RAM) \
	$(QEMU_FLAGS) \
	$(QEMU_SERIAL) \
	$(QEMU_DEBUGCON) \
	$(QEMU_DEBUG) \
	$(QEMU_MONITOR) \
	$(QEMU_NET) \
	$(QEMU_SOUND) \
	$(QEMU_USB) \
	$(QEMU_MEMFILL)

SECTOR_SZ = 512

QEMU_RT = $(QEMU_RT_$(1))
QEMU_RT_asan = -s -S -fw_cfg name=opt/com.doug16k.dgos.kernel_type,string=A
QEMU_RT_trace = -s -fw_cfg name=opt/com.doug16k.dgos.kernel_type,string=T
QEMU_RT_tracedbg = -S $(QEMU_RT_trace)
QEMU_RT_debug = -s -S
QEMU_RT_run = -s
QEMU_RT_test = -s $(QEMU_TEST)
QEMU_RT_testdbg = -s -S $(QEMU_TEST)

QEMU_DRV_COMMON = \
	id=bootdrv,if=none,format=raw,werror=report,rerror=report
#,cache=none
QEMU_DRV = \
	-drive file=$(QEMU_IMAGE_$(1)),media=$(QEMU_MEDIA_$(1)),$(QEMU_DRV_COMMON)

QEMU_DISPLAY_API=sdl

#QEMU_MACHINE = $(QEMU_MACHINE_$(1))
QEMU_DISPLAY_SPICE = -spice ipv4,port=14446,disable-ticketing=on
QEMU_DISPLAY_vga = -display $(QEMU_DISPLAY_API)
QEMU_DISPLAY_gl = -display $(QEMU_DISPLAY_API),gl=on
QEMU_DISPLAY = $(QEMU_DISPLAY_$(1))
QEMU_MACHINE = -machine q35
#$(QEMU_DISPLAY_$(1))

# I give up, nothing in qemu or bochs implement non 512/2KB sectors
QEMU_BLKSIZE =

#logical_block_size=$(SECTOR_SZ),physical_block_size=$(SECTOR_SZ)

QEMU_DISK_TYPE_iso = ide-cd
QEMU_DISK_TYPE_mbr = ide-hd
QEMU_DISK_TYPE_gpt = ide-hd
QEMU_DISK_TYPE_hyb = ide-hd

QEMU_HDCTL_DEV_virtio = \
	-device virtio-blk-pci,drive=bootdrv,disable-legacy=on

#,num-queues=$(QEMU_CPUS)

#-device ich9-ahci,id=bootif

QEMU_HDCTL_DEV_none =

QEMU_HDCTL_DEV_ahci = \
	-device $(QEMU_DISK_TYPE_$(1)),bus=ide.0,drive=bootdrv

QEMU_HDCTL_DEV_nvme = -device nvme,drive=bootdrv,serial=42,cmb_size_mb=4

QEMU_HDCTL_DEV_ide = -device piix4-ide,id=bootif \
	-device $(QEMU_DISK_TYPE_$(1)),bus=bootif.0,drive=bootdrv

QEMU_HDCTL_DEV_usb = \
	-device usb-storage,drive=bootdrv,bus=xhci.0

QEMU_HDCTL = $(call QEMU_MACHINE,$(1)) $(call QEMU_HDCTL_DEV_$(1),$(2))

QEMU_MEDIA = $(QEMU_MEDIA_$(1))
QEMU_MEDIA_hyb = disk
QEMU_MEDIA_gpt = disk
QEMU_MEDIA_mbr = disk
QEMU_MEDIA_iso = cdrom

QEMU_IMAGE = $(QEMU_IMAGE_$(1))
QEMU_IMAGE_hyb = hybdisk.img
QEMU_IMAGE_gpt = gptdisk.img
QEMU_IMAGE_mbr = mbrdisk.img
QEMU_IMAGE_iso = isodisk.iso

QEMU_NP = $(QEMU_NP_$(1))
QEMU_NP_smp = -smp cpus=$(QEMU_CPUS),cores=$(QEMU_CORES),threads=$(QEMU_THREADS)
QEMU_NP_up = -smp cpus=1,cores=1,threads=1
QEMU_NP_numa = \
    $(QEMU_NP_smp) \
    -numa node,cpus=0-$(shell echo $$(( $(QEMU_CPUS) / 2 - 1 ))) \
    -numa node,cpus=$(shell echo $$(( $(QEMU_CPUS) / 2 )))-$(shell echo $$(( $(QEMU_CPUS)-1 ))) \
    -numa dist,src=1,dst=0,val=25 \
    -numa dist,src=0,dst=1,val=15

#\
#    -device pcie-root-port,id=pcie_root1,bus=pcie.1,slot=0 \
#    -device pcie-root-port,id=pcie_root2,bus=pcie.0,slot=1 \
#    -device pxb-pcie,id=pcie.1,bus_nr=0x40,numa_node=1 \
#    -device pxb-pcie,id=pcie.2,bus_nr=0x40,numa_node=1 \
#    \
#    -netdev type=user,hostname=qemu,id=net0,hostfwd=tcp::10022-:22 \
#    -device virtio-net-pci,netdev=net0,bus=pcie.1


#    -drive file=disk.img,if=none,id=hd0 \
#    -device virtio-blk-pci,drive=hd0,bus=pcie_bridge2

QEMU_ICOUNT_SHIFT = 1

QEMU_EMU = $(QEMU_EMU_$(1))
QEMU_EMU_kvm = -enable-kvm -cpu \
	$(QEMU_CPU),invtsc,vmware-cpuid-freq,rdrand,perfctr-core,ibpb,kvm-pv-eoi
QEMU_EMU_tcg_BASE = -cpu max,migratable=false,vmware-cpuid-freq
QEMU_EMU_tcg = $(QEMU_EMU_tcg_BASE) --accel tcg,thread=single
QEMU_EMU_mttcg = $(QEMU_EMU_tcg_BASE) --accel tcg,thread=multi
QEMU_EMU_icount = $(QEMU_EMU_tcg) -icount shift=$(QEMU_ICOUNT_SHIFT),sleep=off
#-cpu max,la57

QEMU_BOOT = $(QEMU_BOOT_$(1))
QEMU_BOOT_bios = -bios $(top_srcdir)/emu/seabios.rom
QEMU_BOOT_efi = -bios /usr/share/ovmf/OVMF.fd

QEMU_BOOTMEDIA = $(QEMU_BOOTMEDIA_$(1)_$(2))
QEMU_BOOTMEDIA_hd_bios = -boot c \
	-netdev user,id=n1

QEMU_BOOTMEDIA_hd_efi = -boot c \
	-netdev user,id=n1

QEMU_BOOTMEDIA_pxe_bios = -boot n \
	-netdev user,id=n1,tftp=$(top_builddir)/,bootfile=bootpxe-bios-bin

QEMU_BOOTMEDIA_pxe_efi = \
	-boot n -netdev user,id=n1,tftp=$(top_builddir)/,bootfile=bootx64.efi

QEMU_VIDEO = $(QEMU_VIDEO_$(1)) $(QEMU_DISPLAY_$(1))
QEMU_VIDEO_vga = -vga std
QEMU_VIDEO_gl = \
	-global driver=virtio-vga,property=disable-legacy,value=on \
	-global driver=virtio-vga,property=disable-modern,value=off \
	-global driver=virtio-vga,property=x-disable-pcie,value=off \
	-global driver=virtio-vga,property=modern-pio-notify,value=on \
	-global driver=virtio-vga,property=max_outputs,value=16 \
	-global driver=virtio-vga,property=x-pcie-extcap-init,value=on \
	-global driver=virtio-vga,property=virgl,value=on \
	-vga virtio

# Connect to debug log
monitor-debug-output: $(DUMPDIR)/qemu-debug-out
	while true; do cat "$(DUMPDIR)/qemu-debug-out"; done

# Connect to console
monitor-connect:
	telnet localhost 7777

QL_RT = debug run test testdbg
#QL_RT = tracedbg trace asan
QL_NP = up smp numa
QL_BT = bios efi
QL_BM = pxe hd
QL_FS = iso mbr gpt hyb
QL_SC = none ahci ide nvme usb virtio
QL_VO = vga gl
QL_EM = kvm icount tcg mttcg

# 1=rt, 2=np, 3=bt, 4=bm, 5=fs, 6=sc, 7=vo, 8=em
define qemu_launcher =
$(1)-$(2)-$(3)-$(4)-$(5)-$(6)-$(7)-$(8): \
		$$(call QEMU_IMAGE,$(5)) $$(QEMU_EXTRA_DEPS)
	@echo -e -n -- '\ec'
	@echo -- 'Run make monitor-debug-output in another terminal if progress stops'
	@echo -e -n -- '\ec' >> dump/qemu-debug-out
	@echo -- $(1)-$(2)-$(3)-$(4)-$(5)-$(6)-$(7)-$(8)
	@echo --     early: $$(QEMU_EARLY)
	@echo --    common: $$(QEMU_COMMON)
	@echo --       emu: $$(call QEMU_EMU,$(8))
	@echo --       drv: $$(call QEMU_DRV,$(5))
	@echo --        np: $$(call QEMU_NP,$(2))
	@echo --     hdctl: $$(call QEMU_HDCTL,$(6),$(5))
	@echo --      boot: $$(call QEMU_BOOT,$(3))
	@echo --  run type: $$(call QEMU_RT,$(1))
	@echo -- bootmedia: $$(call QEMU_BOOTMEDIA,$(4),$(3))
	@echo --     video: $$(call QEMU_VIDEO,$(7))
	@echo --     extra: $$(QEMU_EXTRA)
	$$(QEMU_SUDO) $$(QEMU) \
		$$(QEMU_EARLY) \
		$$(QEMU_COMMON) \
		$$(call QEMU_EMU,$(8)) \
		$$(call QEMU_DRV,$(5)) \
		$$(call QEMU_NP,$(2)) \
		$$(call QEMU_HDCTL,$(6),$(5)) \
		$$(call QEMU_BOOT,$(3)) \
		$$(call QEMU_RT,$(1)) \
		$$(call QEMU_BOOTMEDIA,$(4),$(3)) \
		$$(call QEMU_VIDEO,$(7)) \
		$$(QEMU_EXTRA)

.PHONY: $(1)-$(2)-$(3)-$(4)-$(5)-$(6)-$(7)-$(8)

endef

$(foreach rt,$(QL_RT), \
	$(foreach np,$(QL_NP), \
		$(foreach bt,$(QL_BT), \
			$(foreach bm,$(QL_BM), \
				$(foreach fs,$(QL_FS), \
					$(foreach sc,$(QL_SC), \
						$(foreach em,$(QL_EM), \
							$(foreach vo,$(QL_VO), \
$(eval $(call qemu_launcher,$(rt),$(np),$(bt),$(bm),$(fs),$(sc),$(vo),$(em))) \
							) \
						) \
					) \
				) \
			) \
		) \
	) \
)

debug-tcg: debug-smp-bios-hd-gpt-ahci-vga-tcg

.PHONY: debug-tcg

# ---
# check modules, module imports, kernel exports

show-kernel-exports: all-kernel
	"$(top_srcdir)/kernel_exports.bash"

show-srcdir:
	printf "%s\n" $(top_srcdir)

.PHONY: show-kernel-exports

check-module-imports: all-kernel $(MODULE_LIST)
	"$(top_srcdir)/module_checkimports.bash" $(MODULE_LIST) | $(CXXFILT)

.PHONY: check-module-imports

# ---
# Generate symbols

define genkallsym =

sym/$(1)-kallsyms: $(1) $$(top_srcdir)/Makefile.am
	$$(NM) --demangle --defined-only -n "$$<" \
		| $$(SORT) -u > "$$@"

sym/$(1)-klinesyms: $(1) $$(top_srcdir)/Makefile.am
	awk_file_per_line=( \
		'BEGIN { name="" }' $$$$'\n' \
		'{' $$$$'\n' \
		'  file = $$$$1' $$$$'\n' \
		'  line = $$$$2' $$$$'\n' \
		'  addr = $$$$3' $$$$'\n' \
		'  if (line ~ /[0-9]+/) {' $$$$'\n' \
		'    if (addr ~ /[0-9a-fA-Fx]+/) {' $$$$'\n' \
		'      print name " " line " " addr' $$$$'\n' \
		'    }' $$$$'\n' \
		'  } else if (file && !line && !addr) {' $$$$'\n' \
		'	 name = file' $$$$'\n' \
		'    print "reject: " $$$$0' $$$$'\n' \
		'  }' $$$$'\n' \
		'}' $$$$'\n' \
		) \
	&& awk_dedup_filename=( \
		'BEGIN { prevname="" }' $$$$'\n' \
		'{' $$$$'\n' \
		'  name = $$$$1' $$$$'\n' \
		'  line = $$$$2' $$$$'\n' \
		'  addr = $$$$3' $$$$'\n' \
		'  if (name == prevname) {' $$$$'\n' \
		'    print "* " line " " addr' $$$$'\n' \
		'  } else {' $$$$'\n' \
		'    prevname = name' $$$$'\n' \
		'    print name "\n* " $$$$2 " " $$$$3' $$$$'\n' \
		'  }' $$$$'\n' \
		'}' $$$$'\n' \
		) \
	&& $$(OBJDUMP) --dwarf=decodedline --wide "$$<" \
		| $$(SED) -E 's/^CU: (.*)/\1/g' \
		| $$(TEE) "$$@-raw" \
		| $$(AWK) "$$$${awk_file_per_line[*]}" \
		| $$(SORT) --key=1,1 --key=3,3 -s \
		| $$(AWK) "$$$${awk_dedup_filename[*]}" \
		> "$$@"

#'  if (file ~ /:$$$$/) {' $$$$'\n' \
#'    name = file' $$$$'\n' \
#'  } else if (line ~ /^\d+$$$$/ &&' $$$$'\n' \
#'      addr ~ /^0x[0-9a-fA-F]+/) {' $$$$'\n' \
#'    print name " " line " " addr' $$$$'\n' \
#'  }' $$$$'\n'


#| $$(AWK) "$$$${awk_dedup_filename[*]}"

#| $$(SED) -E 's/^(\S+)\s+([0-9]+)\s+(0x[0-9a-f]+).*/* \2 \3/g' \
#| $$(GREP) -v ':\s*file format' \
#| $$(GREP) -P '^(\S+:)|(\S+\s+\d+\s+0x[0-9a-f]+)' \
#$$(TAIL) -n +1

endef

$(foreach name,$(generate_kallsym_list), \
	$(eval $(call genkallsym,$(name))) \
)

define gensym =

sym/$(1).sym: $(1) \
		$$(top_srcdir)/symbols.mk $$(top_srcdir)/gensymtab.bash
	$$(MKDIR) -p $$(@D)
	OBJDUMP=$$(OBJDUMP) SORT=$(SORT) \
		$$(top_srcdir)/gensymtab.bash "$$(OBJDUMP)" e "$$@" "$$<"

endef

$(foreach name,$(generate_symbols_list), \
	$(eval $(call gensym,$(name))) \
)

generate_symbols_outputs = \
	$(patsubst %,sym/%.sym,$(generate_symbols_list)) \
	$(patsubst %,sym/%-kallsyms,$(generate_kallsym_list)) \
	$(patsubst %,sym/%-klinesyms,$(generate_kallsym_list))

# ----------------------------------------------------------------------------
# Bochs launcher

BOCHS=bochs

# Generate the makefile targets for all the variations of bochs launch

BOCHS_MEDIA = gpt mbr iso
BOCHS_FW = bios efi
BOCHS_PART = kernel boot

# 1=media, 2=fw, 3=part
define bochs_launcher =
$(abs_top_builddir)/bochs-debugger-$(1)-$(2)-$(3)-commands: \
		$$(top_srcdir)/emu/bochs/bochs-debugger-$(1)-$(2)-$(3)-commands
	$$(CP) "$$<" "$$@"

debug-$(1)-$(2)-bochs-$(3): $$(QEMU_IMAGE_$(1)) \
		$$(generate_symbols_outputs) \
		$$(top_srcdir)/emu/bochs/bochs-$(1)-$(2)-config.bxrc \
		$$(abs_top_builddir)/bochs-debugger-$(1)-$(2)-$(3)-commands \
		$$(QEMU_IMAGE_iso)
	echo Using $$(QEMU_IMAGE_$(1))
	$(MKDIR) -p dump
	$$(BOCHS) \
		-f $$(top_srcdir)/emu/bochs/bochs-$(1)-$(2)-config.bxrc \
		-rc $$(abs_top_builddir)/bochs-debugger-$(1)-$(2)-$(3)-commands \
		$$(BOCHS_FLAGS)
.PHONY: debug-$(1)-$(2)-bochs-$(3)
endef

$(foreach media,$(BOCHS_MEDIA), \
	$(foreach fw,$(BOCHS_FW), \
		$(foreach part,$(BOCHS_PART), \
			$(eval $(call bochs_launcher,$(media),$(fw),$(part))) \
		) \
	) \
)

# ----------------------------------------------------------------------------
# Utility targets

disks: hybdisk.img gptdisk.img mbrdisk.img isodisk.iso

.PHONY: disks

debug: debug-up-efi-hd-mbr-ahci-vga-tcg

.PHONY: debug

debug-icount: debug-up-efi-hd-hyb-ahci-vga-icount

.PHONY: debug-icount

debug-iso-bios: debug-up-bios-hd-iso-ahci-vga-tcg

.PHONY: debug-iso-bios

debug-iso-efi: debug-up-efi-hd-iso-ahci-vga-tcg

.PHONY: debug-iso-efi

run-iso-bios: run-up-bios-hd-iso-ahci-vga-tcg

.PHONY: run-iso-bios

run-iso-efi: run-up-efi-hd-iso-ahci-vga-tcg

.PHONY: run-iso-efi

debug-mbr: debug-up-bios-hd-mbr-ahci-vga-tcg

.PHONY: debug-mbr

debug-hyb: debug-up-efi-hd-hyb-ahci-vga-tcg

.PHONY: debug-hyb

debug-pxe: debug-up-bios-pxe-hyb-ahci-vga-tcg

.PHONY: debug-pxe

debug-smp: debug-smp-efi-hd-hyb-ahci-vga-tcg

.PHONY: debug-smp

debug-bios: debug-up-bios-hd-gpt-ahci-vga-tcg

.PHONY: debug-bios

debug-kvm: debug-up-efi-hd-iso-ahci-vga-kvm

.PHONY: debug-kvm

debug-virtio: debug-up-efi-hd-iso-virtio-gl-tcg

.PHONY: debug-virtio

run: run-up-efi-hd-hyb-ahci-vga-tcg

.PHONY: run

run-iso: run-up-efi-hd-iso-ahci-vga-tcg

.PHONY: run-iso

run-bios-iso: run-up-bios-hd-iso-ahci-vga-tcg

.PHONY: run-bios-iso

debug-bios-iso: debug-up-bios-hd-iso-ahci-vga-tcg

.PHONY: debug-bios-iso

debug-bios-pxe: debug-up-bios-pxe-hyb-nvme-vga-tcg

.PHONY: debug-bios-pxe

run-bios-pxe: run-up-bios-pxe-hyb-nvme-vga-tcg

.PHONY: run-bios-pxe

debug-iso: run-up-efi-hd-iso-ahci-vga-tcg

.PHONY: debug-iso

kernel-test: test-smp-efi-hd-hyb-ahci-vga-tcg

.PHONY: kernel-test

kernel-test-kvm: test-smp-efi-hd-hyb-ahci-vga-kvm

.PHONY: kernel-test-kvm

run-all: $(QEMU_LAUNCHERS)

.PHONY: run

run-icount: run-up-efi-hd-hyb-ahci-vga-icount

.PHONY: run-icount

run-mbr: run-up-efi-hd-mbr-ahci-vga-tcg

.PHONY: run-mbr

run-mbr-bios: run-up-bios-hd-mbr-ahci-vga-tcg

.PHONY: run-mbr-bios

debug-mbr-bios: debug-up-bios-hd-mbr-ahci-vga-tcg

.PHONY: debug-mbr-bios

run-mbr-icount: run-up-efi-hd-mbr-ahci-vga-icount

.PHONY: run-mbr-icount

run-hyb: run-up-efi-hd-hyb-ahci-vga-tcg

.PHONY: run-hyb

run-virtio: run-up-efi-hd-hyb-virtio-vga-tcg

.PHONY: run

run-smp: run-smp-efi-hd-hyb-ahci-vga-tcg

.PHONY: run-smp

run-bios: run-up-bios-hd-hyb-ahci-vga-tcg

.PHONY: run-bios

run-bios-kvm: run-up-bios-hd-hyb-ahci-vga-kvm

.PHONY: run-bios-kvm

run-pxe: run-up-bios-pxe-hyb-ahci-vga-tcg

.PHONY: run-pxe

run-kvm: run-up-efi-hd-hyb-ahci-vga-kvm

.PHONY: run-kvm

run-smp-kvm: run-smp-efi-hd-hyb-ahci-vga-kvm

.PHONY: run-smp-kvm

debug-smp-kvm: debug-smp-efi-hd-hyb-ahci-vga-kvm

.PHONY: debug-smp-kvm

run-nvme: run-up-efi-hd-hyb-nvme-vga-tcg

.PHONY: run-nvme

debug-nvme: debug-up-efi-hd-hyb-nvme-vga-tcg

.PHONY: debug-nvme

# ----

debug-bochs: debug-mbr-bios-bochs-kernel
.PHONY: debug-bochs

debug-bochs-boot: debug-mbr-bios-bochs-boot
.PHONY: debug-bochs-boot

debug-bochs-gpt: debug-gpt-bios-bochs-kernel
.PHONY: debug-bochs-gpt

debug-bochs-boot-gpt: debug-gpt-bios-bochs-boot
.PHONY: debug-bochs-boot-gpt

debug-bochs-hyb: debug-hyb-bios-bochs-kernel
.PHONY: debug-bochs-hyb

debug-bochs-boot-hyb: debug-hyb-bios-bochs-boot
.PHONY: debug-bochs-boot-hyb

#==

check-build:
	$(MAKE) clean
	$(MAKE) mbr-bin
	$(MAKE) clean
	$(MAKE) boot1-bin
	$(MAKE) clean
	$(MAKE) bootfat-bin
	$(MAKE) clean
	$(MAKE) bootpxe-bios-bin
	$(MAKE) clean
	$(MAKE) bootiso-bin
	$(MAKE) clean
	$(MAKE) bootx64.efi
	$(MAKE) clean
	$(MAKE) libc.a
	$(MAKE) clean
	$(MAKE) libstdc++.a
	$(MAKE) clean
	$(MAKE) libg.a
	$(MAKE) clean
	$(MAKE) libm.a
	$(MAKE) clean
	$(MAKE) libpng.a
	$(MAKE) clean
	$(MAKE) libwing.a
	$(MAKE) clean
	$(MAKE) init
	$(MAKE) clean
	$(MAKE) kernel-generic
	$(MAKE) clean
	$(MAKE) kernel-tracing
	$(MAKE) clean
	$(MAKE) kernel-asan
	$(MAKE) clean
	$(MAKE) fat32.km
	$(MAKE) clean
	$(MAKE) ext4.km
	$(MAKE) clean
	$(MAKE) iso9660.km
	$(MAKE) clean
	$(MAKE) gpt.km
	$(MAKE) clean
	$(MAKE) mbr.km
	$(MAKE) clean
	$(MAKE) symsrv.km
	$(MAKE) clean
	$(MAKE) unittest.km
	$(MAKE) clean
	$(MAKE) es137x.km
	$(MAKE) clean
	$(MAKE) virtio-gpu.km
	$(MAKE) clean
	$(MAKE) virtio-blk.km
	$(MAKE) clean
	$(MAKE) virtio-base.km
	$(MAKE) clean
	$(MAKE) ahci.km
	$(MAKE) clean
	$(MAKE) nvme.km
	$(MAKE) clean
	$(MAKE) usbmsc.km
	$(MAKE) clean
	$(MAKE) usbxhci.km
	$(MAKE) clean
	$(MAKE) ide.km
	$(MAKE) clean
	$(MAKE) rtl8139.km
	$(MAKE) clean
	$(MAKE) ahci.km

.PHONY: check-build
