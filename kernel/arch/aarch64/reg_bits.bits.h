// THIS FILE IS AUTOMATICALLY GENERATED
// from kernel/arch/aarch64/reg_bits.bits

// PTE

#define PTE_PBHA_BIT             59
#define PTE_AVAIL1_BIT           55
#define PTE_XN_BIT               54
#define PTE_PXN_BIT              53
#define PTE_CONTIGUOUS_BIT       52
#define PTE_DBM_BIT              51
#define PTE_GP_BIT               50

// Block translation entry
#define PTE_nT_BIT               16
#define PTE_OA_BIT               12
#define PTE_ADDR_BIT             12

// Not global
#define PTE_nG_BIT               11

// Accessed flag
#define PTE_AF_BIT               10

// Shareability
#define PTE_SH_BIT               8
#define PTE_AP_BIT               6
#define PTE_NS_BIT               5
#define PTE_ATTRINDX_BIT         2
#define PTE_TABLE_BIT            1
#define PTE_PRESENT_BIT          0

#define PTE_PBHA_BITS            4
#define PTE_AVAIL1_BITS          4
#define PTE_XN_BITS              1
#define PTE_PXN_BITS             1
#define PTE_CONTIGUOUS_BITS      1
#define PTE_DBM_BITS             1
#define PTE_GP_BITS              1

// Block translation entry
#define PTE_nT_BITS              1
#define PTE_OA_BITS              4
#define PTE_ADDR_BITS            40

// Not global
#define PTE_nG_BITS              1

// Accessed flag
#define PTE_AF_BITS              1

// Shareability
#define PTE_SH_BITS              2
#define PTE_AP_BITS              2
#define PTE_NS_BITS              1
#define PTE_ATTRINDX_BITS        3
#define PTE_TABLE_BITS           1
#define PTE_PRESENT_BITS         1
#define PTE_PBHA_MASK            ((1UL << PTE_PBHA_BITS)-1)
#define PTE_AVAIL1_MASK          ((1UL << PTE_AVAIL1_BITS)-1)
#define PTE_XN_MASK              ((1UL << PTE_XN_BITS)-1)
#define PTE_PXN_MASK             ((1UL << PTE_PXN_BITS)-1)
#define PTE_CONTIGUOUS_MASK      ((1UL << PTE_CONTIGUOUS_BITS)-1)
#define PTE_DBM_MASK             ((1UL << PTE_DBM_BITS)-1)
#define PTE_GP_MASK              ((1UL << PTE_GP_BITS)-1)

// Block translation entry
#define PTE_nT_MASK              ((1UL << PTE_nT_BITS)-1)
#define PTE_OA_MASK              ((1UL << PTE_OA_BITS)-1)
#define PTE_ADDR_MASK            ((1UL << PTE_ADDR_BITS)-1)

// Not global
#define PTE_nG_MASK              ((1UL << PTE_nG_BITS)-1)

// Accessed flag
#define PTE_AF_MASK              ((1UL << PTE_AF_BITS)-1)

// Shareability
#define PTE_SH_MASK              ((1UL << PTE_SH_BITS)-1)
#define PTE_AP_MASK              ((1UL << PTE_AP_BITS)-1)
#define PTE_NS_MASK              ((1UL << PTE_NS_BITS)-1)
#define PTE_ATTRINDX_MASK        ((1UL << PTE_ATTRINDX_BITS)-1)
#define PTE_TABLE_MASK           ((1UL << PTE_TABLE_BITS)-1)
#define PTE_PRESENT_MASK         ((1UL << PTE_PRESENT_BITS)-1)
#define PTE_PBHA                 (PTE_PBHA_MASK << PTE_PBHA_BIT)
#define PTE_AVAIL1               (PTE_AVAIL1_MASK << PTE_AVAIL1_BIT)
#define PTE_XN                   (PTE_XN_MASK << PTE_XN_BIT)
#define PTE_PXN                  (PTE_PXN_MASK << PTE_PXN_BIT)
#define PTE_CONTIGUOUS           (PTE_CONTIGUOUS_MASK << PTE_CONTIGUOUS_BIT)
#define PTE_DBM                  (PTE_DBM_MASK << PTE_DBM_BIT)
#define PTE_GP                   (PTE_GP_MASK << PTE_GP_BIT)

// Block translation entry
#define PTE_nT                   (PTE_nT_MASK << PTE_nT_BIT)
#define PTE_OA                   (PTE_OA_MASK << PTE_OA_BIT)
#define PTE_ADDR                 (PTE_ADDR_MASK << PTE_ADDR_BIT)

// Not global
#define PTE_nG                   (PTE_nG_MASK << PTE_nG_BIT)

// Accessed flag
#define PTE_AF                   (PTE_AF_MASK << PTE_AF_BIT)

// Shareability
#define PTE_SH                   (PTE_SH_MASK << PTE_SH_BIT)
#define PTE_AP                   (PTE_AP_MASK << PTE_AP_BIT)
#define PTE_NS                   (PTE_NS_MASK << PTE_NS_BIT)
#define PTE_ATTRINDX             (PTE_ATTRINDX_MASK << PTE_ATTRINDX_BIT)
#define PTE_TABLE                (PTE_TABLE_MASK << PTE_TABLE_BIT)
#define PTE_PRESENT              (PTE_PRESENT_MASK << PTE_PRESENT_BIT)

#define PTE_PBHA_n(n)            (uint64_t(n) << PTE_PBHA_BIT)
#define PTE_AVAIL1_n(n)          (uint64_t(n) << PTE_AVAIL1_BIT)
#define PTE_XN_n(n)              (uint64_t(n) << PTE_XN_BIT)
#define PTE_PXN_n(n)             (uint64_t(n) << PTE_PXN_BIT)
#define PTE_CONTIGUOUS_n(n)      (uint64_t(n) << PTE_CONTIGUOUS_BIT)
#define PTE_DBM_n(n)             (uint64_t(n) << PTE_DBM_BIT)
#define PTE_GP_n(n)              (uint64_t(n) << PTE_GP_BIT)

// Block translation entry
#define PTE_nT_n(n)              (uint64_t(n) << PTE_nT_BIT)
#define PTE_OA_n(n)              (uint64_t(n) << PTE_OA_BIT)
#define PTE_ADDR_n(n)            (uint64_t(n) << PTE_ADDR_BIT)

// Not global
#define PTE_nG_n(n)              (uint64_t(n) << PTE_nG_BIT)

// Accessed flag
#define PTE_AF_n(n)              (uint64_t(n) << PTE_AF_BIT)

// Shareability
#define PTE_SH_n(n)              (uint64_t(n) << PTE_SH_BIT)
#define PTE_AP_n(n)              (uint64_t(n) << PTE_AP_BIT)
#define PTE_NS_n(n)              (uint64_t(n) << PTE_NS_BIT)
#define PTE_ATTRINDX_n(n)        (uint64_t(n) << PTE_ATTRINDX_BIT)
#define PTE_TABLE_n(n)           (uint64_t(n) << PTE_TABLE_BIT)
#define PTE_PRESENT_n(n)         (uint64_t(n) << PTE_PRESENT_BIT)

#define PTE_PBHA_GET(n)          (((n) >> PTE_PBHA_BIT) & PTE_PBHA_MASK)
#define PTE_AVAIL1_GET(n)        (((n) >> PTE_AVAIL1_BIT) & PTE_AVAIL1_MASK)
#define PTE_XN_GET(n)            (((n) >> PTE_XN_BIT) & PTE_XN_MASK)
#define PTE_PXN_GET(n)           (((n) >> PTE_PXN_BIT) & PTE_PXN_MASK)
#define PTE_CONTIGUOUS_GET(n) \
    (((n) >> PTE_CONTIGUOUS_BIT) & PTE_CONTIGUOUS_MASK)
#define PTE_DBM_GET(n)           (((n) >> PTE_DBM_BIT) & PTE_DBM_MASK)
#define PTE_GP_GET(n)            (((n) >> PTE_GP_BIT) & PTE_GP_MASK)

// Block translation entry
#define PTE_nT_GET(n)            (((n) >> PTE_nT_BIT) & PTE_nT_MASK)
#define PTE_OA_GET(n)            (((n) >> PTE_OA_BIT) & PTE_OA_MASK)
#define PTE_ADDR_GET(n)          (((n) >> PTE_ADDR_BIT) & PTE_ADDR_MASK)

// Not global
#define PTE_nG_GET(n)            (((n) >> PTE_nG_BIT) & PTE_nG_MASK)

// Accessed flag
#define PTE_AF_GET(n)            (((n) >> PTE_AF_BIT) & PTE_AF_MASK)

// Shareability
#define PTE_SH_GET(n)            (((n) >> PTE_SH_BIT) & PTE_SH_MASK)
#define PTE_AP_GET(n)            (((n) >> PTE_AP_BIT) & PTE_AP_MASK)
#define PTE_NS_GET(n)            (((n) >> PTE_NS_BIT) & PTE_NS_MASK)
#define PTE_ATTRINDX_GET(n) \
    (((n) >> PTE_ATTRINDX_BIT) & PTE_ATTRINDX_MASK)
#define PTE_TABLE_GET(n)         (((n) >> PTE_TABLE_BIT) & PTE_TABLE_MASK)
#define PTE_PRESENT_GET(n)       (((n) >> PTE_PRESENT_BIT) & PTE_PRESENT_MASK)

#define PTE_PBHA_SET(r,n)        ((r) = ((r) & ~PTE_PBHA) | PTE_PBHA_n((n)))
#define PTE_AVAIL1_SET(r,n) \
    ((r) = ((r) & ~PTE_AVAIL1) | PTE_AVAIL1_n((n)))
#define PTE_XN_SET(r,n)          ((r) = ((r) & ~PTE_XN) | PTE_XN_n((n)))
#define PTE_PXN_SET(r,n)         ((r) = ((r) & ~PTE_PXN) | PTE_PXN_n((n)))
#define PTE_CONTIGUOUS_SET(r,n) \
    ((r) = ((r) & ~PTE_CONTIGUOUS) | PTE_CONTIGUOUS_n((n)))
#define PTE_DBM_SET(r,n)         ((r) = ((r) & ~PTE_DBM) | PTE_DBM_n((n)))
#define PTE_GP_SET(r,n)          ((r) = ((r) & ~PTE_GP) | PTE_GP_n((n)))

// Block translation entry
#define PTE_nT_SET(r,n)          ((r) = ((r) & ~PTE_nT) | PTE_nT_n((n)))
#define PTE_OA_SET(r,n)          ((r) = ((r) & ~PTE_OA) | PTE_OA_n((n)))
#define PTE_ADDR_SET(r,n)        ((r) = ((r) & ~PTE_ADDR) | PTE_ADDR_n((n)))

// Not global
#define PTE_nG_SET(r,n)          ((r) = ((r) & ~PTE_nG) | PTE_nG_n((n)))

// Accessed flag
#define PTE_AF_SET(r,n)          ((r) = ((r) & ~PTE_AF) | PTE_AF_n((n)))

// Shareability
#define PTE_SH_SET(r,n)          ((r) = ((r) & ~PTE_SH) | PTE_SH_n((n)))
#define PTE_AP_SET(r,n)          ((r) = ((r) & ~PTE_AP) | PTE_AP_n((n)))
#define PTE_NS_SET(r,n)          ((r) = ((r) & ~PTE_NS) | PTE_NS_n((n)))
#define PTE_ATTRINDX_SET(r,n) \
    ((r) = ((r) & ~PTE_ATTRINDX) | PTE_ATTRINDX_n((n)))
#define PTE_TABLE_SET(r,n)       ((r) = ((r) & ~PTE_TABLE) | PTE_TABLE_n((n)))
#define PTE_PRESENT_SET(r,n) \
    ((r) = ((r) & ~PTE_PRESENT) | PTE_PRESENT_n((n)))

//
// SCTLR_EL1: System Control Register (EL1)


// Enhanced privileged access never
#define SCTLR_EL1_EPAN_BIT          57
#define SCTLR_EL1_EnALS_BIT         56
#define SCTLR_EL1_EnAS0_BIT         55
#define SCTLR_EL1_EnASR_BIT         54
#define SCTLR_EL1_TWEDEL_BIT        46
#define SCTLR_EL1_TWEDEn_BIT        45
#define SCTLR_EL1_DSSBS_BIT         44

// Access to allocation tags is allowed in EL1
#define SCTLR_EL1_ATA_BIT           43

// Access to allocation tags is allowed in EL0
#define SCTLR_EL1_ATA0_BIT          42

// Tag check fault in EL1
#define SCTLR_EL1_TCF_BIT           40

// Tag check fault in EL0
#define SCTLR_EL1_TCF0_BIT          38
#define SCTLR_EL1_ITFSB_BIT         37
#define SCTLR_EL1_BTI_BIT           36
#define SCTLR_EL1_BT0_BIT           35
#define SCTLR_EL1_EnIA_BIT          31
#define SCTLR_EL1_EnIB_BIT          30
#define SCTLR_EL1_LSMAOE_BIT        29
#define SCTLR_EL1_nTLSMD_BIT        28
#define SCTLR_EL1_EnDA_BIT          27
#define SCTLR_EL1_UCI_BIT           26
#define SCTLR_EL1_EE_BIT            25
#define SCTLR_EL1_E0E_BIT           24
#define SCTLR_EL1_SPAN_BIT          23
#define SCTLR_EL1_EIS_BIT           22
#define SCTLR_EL1_IESB_BIT          21
#define SCTLR_EL1_TSCXT_BIT         20
#define SCTLR_EL1_WXN_BIT           19
#define SCTLR_EL1_nTWE_BIT          18
#define SCTLR_EL1_nTWI_BIT          16
#define SCTLR_EL1_UCT_BIT           15
#define SCTLR_EL1_DZE_BIT           14
#define SCTLR_EL1_EnDB_BIT          13
#define SCTLR_EL1_I_BIT             12
#define SCTLR_EL1_EOS_BIT           11
#define SCTLR_EL1_EnRCTX_BIT        10
#define SCTLR_EL1_UMA_BIT           9
#define SCTLR_EL1_SED_BIT           8
#define SCTLR_EL1_ITD_BIT           7
#define SCTLR_EL1_nAA_BIT           6
#define SCTLR_EL1_CP15BEN_BIT       5
#define SCTLR_EL1_SA0_BIT           4
#define SCTLR_EL1_SA_BIT            3
#define SCTLR_EL1_C_BIT             2
#define SCTLR_EL1_A_BIT             1
#define SCTLR_EL1_M_BIT             0


// Enhanced privileged access never
#define SCTLR_EL1_EPAN_BITS         1
#define SCTLR_EL1_EnALS_BITS        1
#define SCTLR_EL1_EnAS0_BITS        1
#define SCTLR_EL1_EnASR_BITS        1
#define SCTLR_EL1_TWEDEL_BITS       4
#define SCTLR_EL1_TWEDEn_BITS       1
#define SCTLR_EL1_DSSBS_BITS        1

// Access to allocation tags is allowed in EL1
#define SCTLR_EL1_ATA_BITS          1

// Access to allocation tags is allowed in EL0
#define SCTLR_EL1_ATA0_BITS         1

// Tag check fault in EL1
#define SCTLR_EL1_TCF_BITS          2

// Tag check fault in EL0
#define SCTLR_EL1_TCF0_BITS         2
#define SCTLR_EL1_ITFSB_BITS        1
#define SCTLR_EL1_BTI_BITS          1
#define SCTLR_EL1_BT0_BITS          1
#define SCTLR_EL1_EnIA_BITS         1
#define SCTLR_EL1_EnIB_BITS         1
#define SCTLR_EL1_LSMAOE_BITS       1
#define SCTLR_EL1_nTLSMD_BITS       1
#define SCTLR_EL1_EnDA_BITS         1
#define SCTLR_EL1_UCI_BITS          1
#define SCTLR_EL1_EE_BITS           1
#define SCTLR_EL1_E0E_BITS          1
#define SCTLR_EL1_SPAN_BITS         1
#define SCTLR_EL1_EIS_BITS          1
#define SCTLR_EL1_IESB_BITS         1
#define SCTLR_EL1_TSCXT_BITS        1
#define SCTLR_EL1_WXN_BITS          1
#define SCTLR_EL1_nTWE_BITS         1
#define SCTLR_EL1_nTWI_BITS         1
#define SCTLR_EL1_UCT_BITS          1
#define SCTLR_EL1_DZE_BITS          1
#define SCTLR_EL1_EnDB_BITS         1
#define SCTLR_EL1_I_BITS            1
#define SCTLR_EL1_EOS_BITS          1
#define SCTLR_EL1_EnRCTX_BITS       1
#define SCTLR_EL1_UMA_BITS          1
#define SCTLR_EL1_SED_BITS          1
#define SCTLR_EL1_ITD_BITS          1
#define SCTLR_EL1_nAA_BITS          1
#define SCTLR_EL1_CP15BEN_BITS      1
#define SCTLR_EL1_SA0_BITS          1
#define SCTLR_EL1_SA_BITS           1
#define SCTLR_EL1_C_BITS            1
#define SCTLR_EL1_A_BITS            1
#define SCTLR_EL1_M_BITS            1

// Enhanced privileged access never
#define SCTLR_EL1_EPAN_MASK         ((1UL << SCTLR_EL1_EPAN_BITS)-1)
#define SCTLR_EL1_EnALS_MASK        ((1UL << SCTLR_EL1_EnALS_BITS)-1)
#define SCTLR_EL1_EnAS0_MASK        ((1UL << SCTLR_EL1_EnAS0_BITS)-1)
#define SCTLR_EL1_EnASR_MASK        ((1UL << SCTLR_EL1_EnASR_BITS)-1)
#define SCTLR_EL1_TWEDEL_MASK       ((1UL << SCTLR_EL1_TWEDEL_BITS)-1)
#define SCTLR_EL1_TWEDEn_MASK       ((1UL << SCTLR_EL1_TWEDEn_BITS)-1)
#define SCTLR_EL1_DSSBS_MASK        ((1UL << SCTLR_EL1_DSSBS_BITS)-1)

// Access to allocation tags is allowed in EL1
#define SCTLR_EL1_ATA_MASK          ((1UL << SCTLR_EL1_ATA_BITS)-1)

// Access to allocation tags is allowed in EL0
#define SCTLR_EL1_ATA0_MASK         ((1UL << SCTLR_EL1_ATA0_BITS)-1)

// Tag check fault in EL1
#define SCTLR_EL1_TCF_MASK          ((1UL << SCTLR_EL1_TCF_BITS)-1)

// Tag check fault in EL0
#define SCTLR_EL1_TCF0_MASK         ((1UL << SCTLR_EL1_TCF0_BITS)-1)
#define SCTLR_EL1_ITFSB_MASK        ((1UL << SCTLR_EL1_ITFSB_BITS)-1)
#define SCTLR_EL1_BTI_MASK          ((1UL << SCTLR_EL1_BTI_BITS)-1)
#define SCTLR_EL1_BT0_MASK          ((1UL << SCTLR_EL1_BT0_BITS)-1)
#define SCTLR_EL1_EnIA_MASK         ((1UL << SCTLR_EL1_EnIA_BITS)-1)
#define SCTLR_EL1_EnIB_MASK         ((1UL << SCTLR_EL1_EnIB_BITS)-1)
#define SCTLR_EL1_LSMAOE_MASK       ((1UL << SCTLR_EL1_LSMAOE_BITS)-1)
#define SCTLR_EL1_nTLSMD_MASK       ((1UL << SCTLR_EL1_nTLSMD_BITS)-1)
#define SCTLR_EL1_EnDA_MASK         ((1UL << SCTLR_EL1_EnDA_BITS)-1)
#define SCTLR_EL1_UCI_MASK          ((1UL << SCTLR_EL1_UCI_BITS)-1)
#define SCTLR_EL1_EE_MASK           ((1UL << SCTLR_EL1_EE_BITS)-1)
#define SCTLR_EL1_E0E_MASK          ((1UL << SCTLR_EL1_E0E_BITS)-1)
#define SCTLR_EL1_SPAN_MASK         ((1UL << SCTLR_EL1_SPAN_BITS)-1)
#define SCTLR_EL1_EIS_MASK          ((1UL << SCTLR_EL1_EIS_BITS)-1)
#define SCTLR_EL1_IESB_MASK         ((1UL << SCTLR_EL1_IESB_BITS)-1)
#define SCTLR_EL1_TSCXT_MASK        ((1UL << SCTLR_EL1_TSCXT_BITS)-1)
#define SCTLR_EL1_WXN_MASK          ((1UL << SCTLR_EL1_WXN_BITS)-1)
#define SCTLR_EL1_nTWE_MASK         ((1UL << SCTLR_EL1_nTWE_BITS)-1)
#define SCTLR_EL1_nTWI_MASK         ((1UL << SCTLR_EL1_nTWI_BITS)-1)
#define SCTLR_EL1_UCT_MASK          ((1UL << SCTLR_EL1_UCT_BITS)-1)
#define SCTLR_EL1_DZE_MASK          ((1UL << SCTLR_EL1_DZE_BITS)-1)
#define SCTLR_EL1_EnDB_MASK         ((1UL << SCTLR_EL1_EnDB_BITS)-1)
#define SCTLR_EL1_I_MASK            ((1UL << SCTLR_EL1_I_BITS)-1)
#define SCTLR_EL1_EOS_MASK          ((1UL << SCTLR_EL1_EOS_BITS)-1)
#define SCTLR_EL1_EnRCTX_MASK       ((1UL << SCTLR_EL1_EnRCTX_BITS)-1)
#define SCTLR_EL1_UMA_MASK          ((1UL << SCTLR_EL1_UMA_BITS)-1)
#define SCTLR_EL1_SED_MASK          ((1UL << SCTLR_EL1_SED_BITS)-1)
#define SCTLR_EL1_ITD_MASK          ((1UL << SCTLR_EL1_ITD_BITS)-1)
#define SCTLR_EL1_nAA_MASK          ((1UL << SCTLR_EL1_nAA_BITS)-1)
#define SCTLR_EL1_CP15BEN_MASK      ((1UL << SCTLR_EL1_CP15BEN_BITS)-1)
#define SCTLR_EL1_SA0_MASK          ((1UL << SCTLR_EL1_SA0_BITS)-1)
#define SCTLR_EL1_SA_MASK           ((1UL << SCTLR_EL1_SA_BITS)-1)
#define SCTLR_EL1_C_MASK            ((1UL << SCTLR_EL1_C_BITS)-1)
#define SCTLR_EL1_A_MASK            ((1UL << SCTLR_EL1_A_BITS)-1)
#define SCTLR_EL1_M_MASK            ((1UL << SCTLR_EL1_M_BITS)-1)

// Enhanced privileged access never
#define SCTLR_EL1_EPAN              (SCTLR_EL1_EPAN_MASK << SCTLR_EL1_EPAN_BIT)
#define SCTLR_EL1_EnALS \
    (SCTLR_EL1_EnALS_MASK << SCTLR_EL1_EnALS_BIT)
#define SCTLR_EL1_EnAS0 \
    (SCTLR_EL1_EnAS0_MASK << SCTLR_EL1_EnAS0_BIT)
#define SCTLR_EL1_EnASR \
    (SCTLR_EL1_EnASR_MASK << SCTLR_EL1_EnASR_BIT)
#define SCTLR_EL1_TWEDEL \
    (SCTLR_EL1_TWEDEL_MASK << SCTLR_EL1_TWEDEL_BIT)
#define SCTLR_EL1_TWEDEn \
    (SCTLR_EL1_TWEDEn_MASK << SCTLR_EL1_TWEDEn_BIT)
#define SCTLR_EL1_DSSBS \
    (SCTLR_EL1_DSSBS_MASK << SCTLR_EL1_DSSBS_BIT)

// Access to allocation tags is allowed in EL1
#define SCTLR_EL1_ATA               (SCTLR_EL1_ATA_MASK << SCTLR_EL1_ATA_BIT)

// Access to allocation tags is allowed in EL0
#define SCTLR_EL1_ATA0              (SCTLR_EL1_ATA0_MASK << SCTLR_EL1_ATA0_BIT)

// Tag check fault in EL1
#define SCTLR_EL1_TCF               (SCTLR_EL1_TCF_MASK << SCTLR_EL1_TCF_BIT)

// Tag check fault in EL0
#define SCTLR_EL1_TCF0              (SCTLR_EL1_TCF0_MASK << SCTLR_EL1_TCF0_BIT)
#define SCTLR_EL1_ITFSB \
    (SCTLR_EL1_ITFSB_MASK << SCTLR_EL1_ITFSB_BIT)
#define SCTLR_EL1_BTI               (SCTLR_EL1_BTI_MASK << SCTLR_EL1_BTI_BIT)
#define SCTLR_EL1_BT0               (SCTLR_EL1_BT0_MASK << SCTLR_EL1_BT0_BIT)
#define SCTLR_EL1_EnIA              (SCTLR_EL1_EnIA_MASK << SCTLR_EL1_EnIA_BIT)
#define SCTLR_EL1_EnIB              (SCTLR_EL1_EnIB_MASK << SCTLR_EL1_EnIB_BIT)
#define SCTLR_EL1_LSMAOE \
    (SCTLR_EL1_LSMAOE_MASK << SCTLR_EL1_LSMAOE_BIT)
#define SCTLR_EL1_nTLSMD \
    (SCTLR_EL1_nTLSMD_MASK << SCTLR_EL1_nTLSMD_BIT)
#define SCTLR_EL1_EnDA              (SCTLR_EL1_EnDA_MASK << SCTLR_EL1_EnDA_BIT)
#define SCTLR_EL1_UCI               (SCTLR_EL1_UCI_MASK << SCTLR_EL1_UCI_BIT)
#define SCTLR_EL1_EE                (SCTLR_EL1_EE_MASK << SCTLR_EL1_EE_BIT)
#define SCTLR_EL1_E0E               (SCTLR_EL1_E0E_MASK << SCTLR_EL1_E0E_BIT)
#define SCTLR_EL1_SPAN              (SCTLR_EL1_SPAN_MASK << SCTLR_EL1_SPAN_BIT)
#define SCTLR_EL1_EIS               (SCTLR_EL1_EIS_MASK << SCTLR_EL1_EIS_BIT)
#define SCTLR_EL1_IESB              (SCTLR_EL1_IESB_MASK << SCTLR_EL1_IESB_BIT)
#define SCTLR_EL1_TSCXT \
    (SCTLR_EL1_TSCXT_MASK << SCTLR_EL1_TSCXT_BIT)
#define SCTLR_EL1_WXN               (SCTLR_EL1_WXN_MASK << SCTLR_EL1_WXN_BIT)
#define SCTLR_EL1_nTWE              (SCTLR_EL1_nTWE_MASK << SCTLR_EL1_nTWE_BIT)
#define SCTLR_EL1_nTWI              (SCTLR_EL1_nTWI_MASK << SCTLR_EL1_nTWI_BIT)
#define SCTLR_EL1_UCT               (SCTLR_EL1_UCT_MASK << SCTLR_EL1_UCT_BIT)
#define SCTLR_EL1_DZE               (SCTLR_EL1_DZE_MASK << SCTLR_EL1_DZE_BIT)
#define SCTLR_EL1_EnDB              (SCTLR_EL1_EnDB_MASK << SCTLR_EL1_EnDB_BIT)
#define SCTLR_EL1_I                 (SCTLR_EL1_I_MASK << SCTLR_EL1_I_BIT)
#define SCTLR_EL1_EOS               (SCTLR_EL1_EOS_MASK << SCTLR_EL1_EOS_BIT)
#define SCTLR_EL1_EnRCTX \
    (SCTLR_EL1_EnRCTX_MASK << SCTLR_EL1_EnRCTX_BIT)
#define SCTLR_EL1_UMA               (SCTLR_EL1_UMA_MASK << SCTLR_EL1_UMA_BIT)
#define SCTLR_EL1_SED               (SCTLR_EL1_SED_MASK << SCTLR_EL1_SED_BIT)
#define SCTLR_EL1_ITD               (SCTLR_EL1_ITD_MASK << SCTLR_EL1_ITD_BIT)
#define SCTLR_EL1_nAA               (SCTLR_EL1_nAA_MASK << SCTLR_EL1_nAA_BIT)
#define SCTLR_EL1_CP15BEN \
    (SCTLR_EL1_CP15BEN_MASK << SCTLR_EL1_CP15BEN_BIT)
#define SCTLR_EL1_SA0               (SCTLR_EL1_SA0_MASK << SCTLR_EL1_SA0_BIT)
#define SCTLR_EL1_SA                (SCTLR_EL1_SA_MASK << SCTLR_EL1_SA_BIT)
#define SCTLR_EL1_C                 (SCTLR_EL1_C_MASK << SCTLR_EL1_C_BIT)
#define SCTLR_EL1_A                 (SCTLR_EL1_A_MASK << SCTLR_EL1_A_BIT)
#define SCTLR_EL1_M                 (SCTLR_EL1_M_MASK << SCTLR_EL1_M_BIT)


// Enhanced privileged access never
#define SCTLR_EL1_EPAN_n(n)         (uint64_t(n) << SCTLR_EL1_EPAN_BIT)
#define SCTLR_EL1_EnALS_n(n)        (uint64_t(n) << SCTLR_EL1_EnALS_BIT)
#define SCTLR_EL1_EnAS0_n(n)        (uint64_t(n) << SCTLR_EL1_EnAS0_BIT)
#define SCTLR_EL1_EnASR_n(n)        (uint64_t(n) << SCTLR_EL1_EnASR_BIT)
#define SCTLR_EL1_TWEDEL_n(n)       (uint64_t(n) << SCTLR_EL1_TWEDEL_BIT)
#define SCTLR_EL1_TWEDEn_n(n)       (uint64_t(n) << SCTLR_EL1_TWEDEn_BIT)
#define SCTLR_EL1_DSSBS_n(n)        (uint64_t(n) << SCTLR_EL1_DSSBS_BIT)

// Access to allocation tags is allowed in EL1
#define SCTLR_EL1_ATA_n(n)          (uint64_t(n) << SCTLR_EL1_ATA_BIT)

// Access to allocation tags is allowed in EL0
#define SCTLR_EL1_ATA0_n(n)         (uint64_t(n) << SCTLR_EL1_ATA0_BIT)

// Tag check fault in EL1
#define SCTLR_EL1_TCF_n(n)          (uint64_t(n) << SCTLR_EL1_TCF_BIT)

// Tag check fault in EL0
#define SCTLR_EL1_TCF0_n(n)         (uint64_t(n) << SCTLR_EL1_TCF0_BIT)
#define SCTLR_EL1_ITFSB_n(n)        (uint64_t(n) << SCTLR_EL1_ITFSB_BIT)
#define SCTLR_EL1_BTI_n(n)          (uint64_t(n) << SCTLR_EL1_BTI_BIT)
#define SCTLR_EL1_BT0_n(n)          (uint64_t(n) << SCTLR_EL1_BT0_BIT)
#define SCTLR_EL1_EnIA_n(n)         (uint64_t(n) << SCTLR_EL1_EnIA_BIT)
#define SCTLR_EL1_EnIB_n(n)         (uint64_t(n) << SCTLR_EL1_EnIB_BIT)
#define SCTLR_EL1_LSMAOE_n(n)       (uint64_t(n) << SCTLR_EL1_LSMAOE_BIT)
#define SCTLR_EL1_nTLSMD_n(n)       (uint64_t(n) << SCTLR_EL1_nTLSMD_BIT)
#define SCTLR_EL1_EnDA_n(n)         (uint64_t(n) << SCTLR_EL1_EnDA_BIT)
#define SCTLR_EL1_UCI_n(n)          (uint64_t(n) << SCTLR_EL1_UCI_BIT)
#define SCTLR_EL1_EE_n(n)           (uint64_t(n) << SCTLR_EL1_EE_BIT)
#define SCTLR_EL1_E0E_n(n)          (uint64_t(n) << SCTLR_EL1_E0E_BIT)
#define SCTLR_EL1_SPAN_n(n)         (uint64_t(n) << SCTLR_EL1_SPAN_BIT)
#define SCTLR_EL1_EIS_n(n)          (uint64_t(n) << SCTLR_EL1_EIS_BIT)
#define SCTLR_EL1_IESB_n(n)         (uint64_t(n) << SCTLR_EL1_IESB_BIT)
#define SCTLR_EL1_TSCXT_n(n)        (uint64_t(n) << SCTLR_EL1_TSCXT_BIT)
#define SCTLR_EL1_WXN_n(n)          (uint64_t(n) << SCTLR_EL1_WXN_BIT)
#define SCTLR_EL1_nTWE_n(n)         (uint64_t(n) << SCTLR_EL1_nTWE_BIT)
#define SCTLR_EL1_nTWI_n(n)         (uint64_t(n) << SCTLR_EL1_nTWI_BIT)
#define SCTLR_EL1_UCT_n(n)          (uint64_t(n) << SCTLR_EL1_UCT_BIT)
#define SCTLR_EL1_DZE_n(n)          (uint64_t(n) << SCTLR_EL1_DZE_BIT)
#define SCTLR_EL1_EnDB_n(n)         (uint64_t(n) << SCTLR_EL1_EnDB_BIT)
#define SCTLR_EL1_I_n(n)            (uint64_t(n) << SCTLR_EL1_I_BIT)
#define SCTLR_EL1_EOS_n(n)          (uint64_t(n) << SCTLR_EL1_EOS_BIT)
#define SCTLR_EL1_EnRCTX_n(n)       (uint64_t(n) << SCTLR_EL1_EnRCTX_BIT)
#define SCTLR_EL1_UMA_n(n)          (uint64_t(n) << SCTLR_EL1_UMA_BIT)
#define SCTLR_EL1_SED_n(n)          (uint64_t(n) << SCTLR_EL1_SED_BIT)
#define SCTLR_EL1_ITD_n(n)          (uint64_t(n) << SCTLR_EL1_ITD_BIT)
#define SCTLR_EL1_nAA_n(n)          (uint64_t(n) << SCTLR_EL1_nAA_BIT)
#define SCTLR_EL1_CP15BEN_n(n)      (uint64_t(n) << SCTLR_EL1_CP15BEN_BIT)
#define SCTLR_EL1_SA0_n(n)          (uint64_t(n) << SCTLR_EL1_SA0_BIT)
#define SCTLR_EL1_SA_n(n)           (uint64_t(n) << SCTLR_EL1_SA_BIT)
#define SCTLR_EL1_C_n(n)            (uint64_t(n) << SCTLR_EL1_C_BIT)
#define SCTLR_EL1_A_n(n)            (uint64_t(n) << SCTLR_EL1_A_BIT)
#define SCTLR_EL1_M_n(n)            (uint64_t(n) << SCTLR_EL1_M_BIT)


// Enhanced privileged access never
#define SCTLR_EL1_EPAN_GET(n) \
    (((n) >> SCTLR_EL1_EPAN_BIT) & SCTLR_EL1_EPAN_MASK)
#define SCTLR_EL1_EnALS_GET(n) \
    (((n) >> SCTLR_EL1_EnALS_BIT) & SCTLR_EL1_EnALS_MASK)
#define SCTLR_EL1_EnAS0_GET(n) \
    (((n) >> SCTLR_EL1_EnAS0_BIT) & SCTLR_EL1_EnAS0_MASK)
#define SCTLR_EL1_EnASR_GET(n) \
    (((n) >> SCTLR_EL1_EnASR_BIT) & SCTLR_EL1_EnASR_MASK)
#define SCTLR_EL1_TWEDEL_GET(n) \
    (((n) >> SCTLR_EL1_TWEDEL_BIT) & SCTLR_EL1_TWEDEL_MASK)
#define SCTLR_EL1_TWEDEn_GET(n) \
    (((n) >> SCTLR_EL1_TWEDEn_BIT) & SCTLR_EL1_TWEDEn_MASK)
#define SCTLR_EL1_DSSBS_GET(n) \
    (((n) >> SCTLR_EL1_DSSBS_BIT) & SCTLR_EL1_DSSBS_MASK)

// Access to allocation tags is allowed in EL1
#define SCTLR_EL1_ATA_GET(n) \
    (((n) >> SCTLR_EL1_ATA_BIT) & SCTLR_EL1_ATA_MASK)

// Access to allocation tags is allowed in EL0
#define SCTLR_EL1_ATA0_GET(n) \
    (((n) >> SCTLR_EL1_ATA0_BIT) & SCTLR_EL1_ATA0_MASK)

// Tag check fault in EL1
#define SCTLR_EL1_TCF_GET(n) \
    (((n) >> SCTLR_EL1_TCF_BIT) & SCTLR_EL1_TCF_MASK)

// Tag check fault in EL0
#define SCTLR_EL1_TCF0_GET(n) \
    (((n) >> SCTLR_EL1_TCF0_BIT) & SCTLR_EL1_TCF0_MASK)
#define SCTLR_EL1_ITFSB_GET(n) \
    (((n) >> SCTLR_EL1_ITFSB_BIT) & SCTLR_EL1_ITFSB_MASK)
#define SCTLR_EL1_BTI_GET(n) \
    (((n) >> SCTLR_EL1_BTI_BIT) & SCTLR_EL1_BTI_MASK)
#define SCTLR_EL1_BT0_GET(n) \
    (((n) >> SCTLR_EL1_BT0_BIT) & SCTLR_EL1_BT0_MASK)
#define SCTLR_EL1_EnIA_GET(n) \
    (((n) >> SCTLR_EL1_EnIA_BIT) & SCTLR_EL1_EnIA_MASK)
#define SCTLR_EL1_EnIB_GET(n) \
    (((n) >> SCTLR_EL1_EnIB_BIT) & SCTLR_EL1_EnIB_MASK)
#define SCTLR_EL1_LSMAOE_GET(n) \
    (((n) >> SCTLR_EL1_LSMAOE_BIT) & SCTLR_EL1_LSMAOE_MASK)
#define SCTLR_EL1_nTLSMD_GET(n) \
    (((n) >> SCTLR_EL1_nTLSMD_BIT) & SCTLR_EL1_nTLSMD_MASK)
#define SCTLR_EL1_EnDA_GET(n) \
    (((n) >> SCTLR_EL1_EnDA_BIT) & SCTLR_EL1_EnDA_MASK)
#define SCTLR_EL1_UCI_GET(n) \
    (((n) >> SCTLR_EL1_UCI_BIT) & SCTLR_EL1_UCI_MASK)
#define SCTLR_EL1_EE_GET(n) \
    (((n) >> SCTLR_EL1_EE_BIT) & SCTLR_EL1_EE_MASK)
#define SCTLR_EL1_E0E_GET(n) \
    (((n) >> SCTLR_EL1_E0E_BIT) & SCTLR_EL1_E0E_MASK)
#define SCTLR_EL1_SPAN_GET(n) \
    (((n) >> SCTLR_EL1_SPAN_BIT) & SCTLR_EL1_SPAN_MASK)
#define SCTLR_EL1_EIS_GET(n) \
    (((n) >> SCTLR_EL1_EIS_BIT) & SCTLR_EL1_EIS_MASK)
#define SCTLR_EL1_IESB_GET(n) \
    (((n) >> SCTLR_EL1_IESB_BIT) & SCTLR_EL1_IESB_MASK)
#define SCTLR_EL1_TSCXT_GET(n) \
    (((n) >> SCTLR_EL1_TSCXT_BIT) & SCTLR_EL1_TSCXT_MASK)
#define SCTLR_EL1_WXN_GET(n) \
    (((n) >> SCTLR_EL1_WXN_BIT) & SCTLR_EL1_WXN_MASK)
#define SCTLR_EL1_nTWE_GET(n) \
    (((n) >> SCTLR_EL1_nTWE_BIT) & SCTLR_EL1_nTWE_MASK)
#define SCTLR_EL1_nTWI_GET(n) \
    (((n) >> SCTLR_EL1_nTWI_BIT) & SCTLR_EL1_nTWI_MASK)
#define SCTLR_EL1_UCT_GET(n) \
    (((n) >> SCTLR_EL1_UCT_BIT) & SCTLR_EL1_UCT_MASK)
#define SCTLR_EL1_DZE_GET(n) \
    (((n) >> SCTLR_EL1_DZE_BIT) & SCTLR_EL1_DZE_MASK)
#define SCTLR_EL1_EnDB_GET(n) \
    (((n) >> SCTLR_EL1_EnDB_BIT) & SCTLR_EL1_EnDB_MASK)
#define SCTLR_EL1_I_GET(n) \
    (((n) >> SCTLR_EL1_I_BIT) & SCTLR_EL1_I_MASK)
#define SCTLR_EL1_EOS_GET(n) \
    (((n) >> SCTLR_EL1_EOS_BIT) & SCTLR_EL1_EOS_MASK)
#define SCTLR_EL1_EnRCTX_GET(n) \
    (((n) >> SCTLR_EL1_EnRCTX_BIT) & SCTLR_EL1_EnRCTX_MASK)
#define SCTLR_EL1_UMA_GET(n) \
    (((n) >> SCTLR_EL1_UMA_BIT) & SCTLR_EL1_UMA_MASK)
#define SCTLR_EL1_SED_GET(n) \
    (((n) >> SCTLR_EL1_SED_BIT) & SCTLR_EL1_SED_MASK)
#define SCTLR_EL1_ITD_GET(n) \
    (((n) >> SCTLR_EL1_ITD_BIT) & SCTLR_EL1_ITD_MASK)
#define SCTLR_EL1_nAA_GET(n) \
    (((n) >> SCTLR_EL1_nAA_BIT) & SCTLR_EL1_nAA_MASK)
#define SCTLR_EL1_CP15BEN_GET(n) \
    (((n) >> SCTLR_EL1_CP15BEN_BIT) & SCTLR_EL1_CP15BEN_MASK)
#define SCTLR_EL1_SA0_GET(n) \
    (((n) >> SCTLR_EL1_SA0_BIT) & SCTLR_EL1_SA0_MASK)
#define SCTLR_EL1_SA_GET(n) \
    (((n) >> SCTLR_EL1_SA_BIT) & SCTLR_EL1_SA_MASK)
#define SCTLR_EL1_C_GET(n) \
    (((n) >> SCTLR_EL1_C_BIT) & SCTLR_EL1_C_MASK)
#define SCTLR_EL1_A_GET(n) \
    (((n) >> SCTLR_EL1_A_BIT) & SCTLR_EL1_A_MASK)
#define SCTLR_EL1_M_GET(n) \
    (((n) >> SCTLR_EL1_M_BIT) & SCTLR_EL1_M_MASK)


// Enhanced privileged access never
#define SCTLR_EL1_EPAN_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_EPAN) | SCTLR_EL1_EPAN_n((n)))
#define SCTLR_EL1_EnALS_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_EnALS) | SCTLR_EL1_EnALS_n((n)))
#define SCTLR_EL1_EnAS0_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_EnAS0) | SCTLR_EL1_EnAS0_n((n)))
#define SCTLR_EL1_EnASR_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_EnASR) | SCTLR_EL1_EnASR_n((n)))
#define SCTLR_EL1_TWEDEL_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_TWEDEL) | SCTLR_EL1_TWEDEL_n((n)))
#define SCTLR_EL1_TWEDEn_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_TWEDEn) | SCTLR_EL1_TWEDEn_n((n)))
#define SCTLR_EL1_DSSBS_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_DSSBS) | SCTLR_EL1_DSSBS_n((n)))

// Access to allocation tags is allowed in EL1
#define SCTLR_EL1_ATA_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_ATA) | SCTLR_EL1_ATA_n((n)))

// Access to allocation tags is allowed in EL0
#define SCTLR_EL1_ATA0_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_ATA0) | SCTLR_EL1_ATA0_n((n)))

// Tag check fault in EL1
#define SCTLR_EL1_TCF_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_TCF) | SCTLR_EL1_TCF_n((n)))

// Tag check fault in EL0
#define SCTLR_EL1_TCF0_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_TCF0) | SCTLR_EL1_TCF0_n((n)))
#define SCTLR_EL1_ITFSB_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_ITFSB) | SCTLR_EL1_ITFSB_n((n)))
#define SCTLR_EL1_BTI_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_BTI) | SCTLR_EL1_BTI_n((n)))
#define SCTLR_EL1_BT0_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_BT0) | SCTLR_EL1_BT0_n((n)))
#define SCTLR_EL1_EnIA_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_EnIA) | SCTLR_EL1_EnIA_n((n)))
#define SCTLR_EL1_EnIB_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_EnIB) | SCTLR_EL1_EnIB_n((n)))
#define SCTLR_EL1_LSMAOE_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_LSMAOE) | SCTLR_EL1_LSMAOE_n((n)))
#define SCTLR_EL1_nTLSMD_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_nTLSMD) | SCTLR_EL1_nTLSMD_n((n)))
#define SCTLR_EL1_EnDA_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_EnDA) | SCTLR_EL1_EnDA_n((n)))
#define SCTLR_EL1_UCI_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_UCI) | SCTLR_EL1_UCI_n((n)))
#define SCTLR_EL1_EE_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_EE) | SCTLR_EL1_EE_n((n)))
#define SCTLR_EL1_E0E_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_E0E) | SCTLR_EL1_E0E_n((n)))
#define SCTLR_EL1_SPAN_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_SPAN) | SCTLR_EL1_SPAN_n((n)))
#define SCTLR_EL1_EIS_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_EIS) | SCTLR_EL1_EIS_n((n)))
#define SCTLR_EL1_IESB_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_IESB) | SCTLR_EL1_IESB_n((n)))
#define SCTLR_EL1_TSCXT_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_TSCXT) | SCTLR_EL1_TSCXT_n((n)))
#define SCTLR_EL1_WXN_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_WXN) | SCTLR_EL1_WXN_n((n)))
#define SCTLR_EL1_nTWE_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_nTWE) | SCTLR_EL1_nTWE_n((n)))
#define SCTLR_EL1_nTWI_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_nTWI) | SCTLR_EL1_nTWI_n((n)))
#define SCTLR_EL1_UCT_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_UCT) | SCTLR_EL1_UCT_n((n)))
#define SCTLR_EL1_DZE_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_DZE) | SCTLR_EL1_DZE_n((n)))
#define SCTLR_EL1_EnDB_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_EnDB) | SCTLR_EL1_EnDB_n((n)))
#define SCTLR_EL1_I_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_I) | SCTLR_EL1_I_n((n)))
#define SCTLR_EL1_EOS_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_EOS) | SCTLR_EL1_EOS_n((n)))
#define SCTLR_EL1_EnRCTX_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_EnRCTX) | SCTLR_EL1_EnRCTX_n((n)))
#define SCTLR_EL1_UMA_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_UMA) | SCTLR_EL1_UMA_n((n)))
#define SCTLR_EL1_SED_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_SED) | SCTLR_EL1_SED_n((n)))
#define SCTLR_EL1_ITD_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_ITD) | SCTLR_EL1_ITD_n((n)))
#define SCTLR_EL1_nAA_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_nAA) | SCTLR_EL1_nAA_n((n)))
#define SCTLR_EL1_CP15BEN_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_CP15BEN) | SCTLR_EL1_CP15BEN_n((n)))
#define SCTLR_EL1_SA0_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_SA0) | SCTLR_EL1_SA0_n((n)))
#define SCTLR_EL1_SA_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_SA) | SCTLR_EL1_SA_n((n)))
#define SCTLR_EL1_C_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_C) | SCTLR_EL1_C_n((n)))
#define SCTLR_EL1_A_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_A) | SCTLR_EL1_A_n((n)))
#define SCTLR_EL1_M_SET(r,n) \
    ((r) = ((r) & ~SCTLR_EL1_M) | SCTLR_EL1_M_n((n)))

